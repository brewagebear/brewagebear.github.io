{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"b614bede-83e9-59c1-93bb-7b6881b7d0f9","excerpt":"STEP 1.1 운영체제와 시스템 콜 STEP 2.1 I/O 향상을 위한 운영체제 수준의 기술 STEP 2.1.1 버퍼(Buffer) STEP 2.1.2 Scatter/Gather STEP 2.1.3 가상메모리 STEP 2.1.4 메모리 맵 파일 (Memory-mapped I/O) STEP 2.1.5 파일 락 STEP 4.1 자바의 포인터 버퍼 도입 STEP 4.2 네이티브 I/O 서비스를 제공 채널 도입 STEP 4.3 셀렉터 도입 시스템 콜과 자바에서의 시스템 콜 사용례 목차 개요 STEP 1. 시스템 콜이란? STEP 1.1 운영체제와 시스템 콜 STEP 2. 자바와 시스템 콜 STEP 2.1 I/O 향상을 위한 운영체제 수준의 기술 STEP 2.1.1 버퍼(Buffer) STEP 2.1.2 Scatter/Gather STEP 2.1.3 가상메모리 STEP 2.1.4 메모리 맵 파일(MMIO) STEP 2.1.5 파일 락 STEP 2.2 중간정리 STEP 4. 자바에서의 블록…","frontmatter":{"categories":"개발","title":"시스템 콜과 자바에서의 시스템 콜 사용례","date":"March 18, 2022"},"fields":{"slug":"/java-syscall-and-io/"}}},{"node":{"id":"6a4a185e-59a6-54d6-b8e7-2e214c10d7b4","excerpt":"GDS(Global Distribution Systems) SOAP와 WSDL SOAP(Simple Object Access Protocol)란? WSDL(Web Services Description Language) 란? Spring Boot SOAP 예시 XML 스키마 파일 작성 XML 파일을 자바 클래스 파일로 만들기 Endpoint 클래스 및 Config 클래스 실제 테스트 개요 현재, 간단하게 여행 도메인 관련한 토이 프로젝트를 진행하고 있는 상황이다.\n먼저 항공쪽 서비스를 먼저 만들고 있었는데 궁금했던 점은 스카이 스캐너와 같은 서비스에서 어떻게 수 많은 항공사의 정보를 가져오는지 궁금했고, 이 도메인에 대해서 알게된 점과 요청, 응답 스펙에 대해서 알아보고자 한다. GDS(Global Distribution Systems) 수 많은 온라인 여행사(OTA)들이 전 세계의 항공 정보를 가져오고 있다.\n위에 개요에 말한 것 처럼 나는 이게 어떻게 가져오는 지 궁금해졌고, 리…","frontmatter":{"categories":"개발","title":"Spring 공식 예제로 알아보는 SOAP와 WSDL","date":"February 17, 2022"},"fields":{"slug":"/soap-and-wsdl/"}}},{"node":{"id":"ccd2f160-9bde-5736-b66e-498b63f2da3a","excerpt":"STEP 2.1 클래스 로더 시스템 영역(Class Loader System Area) STEP 2.1.1 클래스 로더의 특징(Class Loader’s feature) STEP 2.2 메모리 영역(Runtime Data Area) STEP 2.3 실행 엔진(Execution Engine) 인터프리터 JIT 컴파일러 GC(Garbage Collector) STEP 2.4 클래스 로딩 과정(Class Loading Process) STEP 2.4.1 동적로딩 STEP 2.4.2 로드타임 동적 로딩(load-time dynamic loading) STEP 2.4.3 런타임 동적 로딩(load-time dynamic loading) STEP 4.1 Class Loader를 통한 Hot Swap 예제 STEP 4.2 바이트코드 조작을 통한 Hot Swap 예제 목차 개요 STEP 1. Write Once, Run Anywhere(WORA) STEP 2. JVM 구조 STEP 2.1 클래스…","frontmatter":{"categories":"개발","title":"Fundamental of JVM and Class Loader in java - Java JVM과 Class Loader의 동작 과정 이해","date":"December 29, 2020"},"fields":{"slug":"/fundamental-jvm-classloader/"}}},{"node":{"id":"287f6419-a82a-51e9-8464-09d3be200c24","excerpt":"STEP 1. Redis Write Back을 도입하는 여정기 STEP 1. Redis Collection 설계 및 구현 STEP 2.1 추가 요구사항 STEP 3. 문제점 목차 개요 STEP 1. Redis Write Back을 도입하는 여정기 STEP 2. Redis Collection 설계 및 구현 STEP 2.1 추가 요구사항 STEP 3. 문제점 STEP 4. REFERENCE 개요 현재 재직 중인 회사에서 추천 시스템을 도입하기 위해서 기존의 로깅 방식에 대해서 고도화가 필요했었다. 일단, 아주 단순하게 기존 사용자에게 추천됐던 아이템과 읽은 아이템을 토대로 추천 시스템을 만들고자하였다. 이 업무를 진행하기에 앞서 진행되어야하는 부분이 바로 어떤 아이템들이 추천되었고, 어떤 아이템을 읽었는지에 대한 로그를 수집하는 일이었다. 기존에는 사용자가 클릭을 수행하면 바로 DB에 저장이 되는 형식이였으나 사용자가 증가함에 따라 DB 부하 문제도 있고, 개선책을 찾게 되었다. ST…","frontmatter":{"categories":"개발 인프라","title":"To The Moon - 더 나은 로깅시스템을 위한 여정 (Redis 편)","date":"December 29, 2020"},"fields":{"slug":"/better-logging-with-redis/"}}},{"node":{"id":"71473346-b939-5b1f-9fc7-2698078a9f3f","excerpt":"STEP 1.1 실세계 예시를 통한 객체지향 들여다보기 STEP 1.1.1 요청과 응답으로 구성된 협력 STEP 1.1.2 역할과 책임 STEP 1.2 중간 정리 STEP 2.1 상태와 행동을 함께 지닌 자율적인 객체 STEP 2.2 협력과 메시지 STEP 2.3 메서드와 자율성 객체지향의 사실과 오해 1장 리뷰 STEP 1. 객체지향은 실세계의 모방이다? STEP 1.1 실세계 예시를 통한 객체지향 들여다보기 STEP 1.1.1 요청과 응답으로 구성된 협력 STEP 1.1.2 역할과 책임 STEP 1.2 중간 정리 STEP 2. 협력 속에 사는 객체 STEP 2.1 상태와 행동을 함께 지닌 자율적인 객체 STEP 2.2 협력과 메시지 STEP 2.3 메서드와 자율성 STEP 3. 객체지향의 본질 STEP 4. 객체를 지향하라 개요 이 책을 보고 나서 많은 것들을 깨닫고, 많은 생각을 하게 되었다. 정말 객체지향이란 무엇인지? 에 대해서 가슴에 와닿게 설명해준 책이라 생각한다. 특…","frontmatter":{"categories":"개발 독서요약","title":"Book Review - 객체지향의 사실과 오해 1장 리뷰","date":"November 15, 2020"},"fields":{"slug":"/review-essence-of-object-orientation/"}}},{"node":{"id":"2d56fc77-4903-5159-a64c-f40e3e42384e","excerpt":"STEP 1.1 콜렉션 리팩토링에 대한 고민 STEP 1.1.1 비즈니스에 종속적인 자료구조 생성 STEP 1.1.2 Collection의 불변성을 보장 STEP 1.1.3 과제에서 활용한 방법 STEP 1.2 인조키와 자연키에 대한 고민 STEP 1.3 JPA 설계에 대한 고민 STEP 2.1 JPA LazyInitializationException 핸들링 STEP 2.1.1 JPA 지연로딩과 즉시로딩 STEP 2.1.2 JPA N+1 문제 STEP 2.1.3 Fetch Join을 통한 트러블 슈팅 STEP 2.2 동일 객체 GroupBy 핸들링 STEP 3.1 정적 팩토리 메소드 리팩토링 관련 STEP 1. 구현 중에 맞딱드린 고민과 해결방법 STEP 1.1 콜렉션 리팩토링에 대한 고민 STEP 1.2 인조키와 자연키에 대한 고민 STEP 1.3 JPA 설계에 대한 고민 STEP 2. 트러블 슈팅 STEP 2.1 JPA LazyInitializationException 핸들링 …","frontmatter":{"categories":"개발","title":"Review after the homework of a Startup - 어떤 스타트업의 과제 전형 참여 후기","date":"November 10, 2020"},"fields":{"slug":"/review-startup-homework/"}}},{"node":{"id":"046ab165-f7ab-5189-ae06-b420507f5eb2","excerpt":"STEP 2.1 StatelessWidget vs StatefulWiget STEP 2.2 Stateless Widget STEP 2.2 StatefulWidget STEP 2.2.1 State란? STEP 2.3 StatelessWidget과 StatefulWidget 선택 방법 STEP 1. 서론 STEP 2. 본론 STEP 2. StatelessWidget vs StatefulWiget STEP 2.1 StatelessWidget vs StatefulWiget STEP 2.2 Stateless Widget STEP 2.3 Stateful Widget STEP 2.3.1 State란? STEP 2.3 StatelessWidget과 StatefulWidget 선택 방법 STEP 3. 결론 STEP 4. Reference Flutter - Widget, State, BuildContext 그리고 InheritedWidget Part 1 STEP 1. 서론 Flutter 공식팀에서 …","frontmatter":{"categories":"개발","title":"Flutter - Widget, State, BuildContext 그리고 InheritedWidget (Part 1)","date":"April 28, 2020"},"fields":{"slug":"/fundamental-of-flutter-widget/"}}},{"node":{"id":"782cdf08-b721-5fb0-995c-d7c56e001ce1","excerpt":"STEP 1.1 let 키워드 STEP 1.2 호이스팅(Hoisting) STEP 1.3 자바스크립트 실행컨텍스트(JavaScript Execution Context) STEP 1.3.1 생성 단계(Creation Phase) STEP 1.3.2 실행 단계(Execution Phase) STEP 1. ES6 VS ES6 이전 자바스크립트 STEP 1.1 let 키워드 STEP 1.2 호이스팅(Hoisting) STEP 1.3 자바스크립트 실행컨텍스트(JavaScript Execution Context) STEP 1.3.1 생성 단계(Creation Phase) STEP 1.3.2 실행 단계(Execution Phase) STEP 4. Review STEP 5. Reference STEP 1. ES6 vs ES6 이전 자바스크립트 기존의 ES6 이전의 자바스크립트에서는 블록단위의 스코프가 존재하지 않았다. C나 Java등 많은 프로그래밍언어를 했던 사람이라면, for문 안에서 돌아가…","frontmatter":{"categories":"개발","title":"자바스크립트 동작원리와 ES6 - Fundamentals of JavaScript & ES6","date":"September 09, 2019"},"fields":{"slug":"/fundamentals-of-javascript/"}}},{"node":{"id":"636a189c-46f9-5ff6-b3a9-cd3a500e4627","excerpt":"STEP 1.1 RequestDispatcher 클래스 STEP 1.1.2 HttpServletResponse 클래스 STEP 1.1.1.1 HttpServletResponse 예제 소스 STEP 1.1.2 RequestDispatcher 클래스 STEP 1.1.2.1 RequestDispatcher 예제 소스 STEP 1. 포워딩(Forwading)이란? STEP 1.1 HttpServletRequest 클래스 STEP 1.1.1 HttpServletResponse 클래스 STEP 1.1.1.1 HttpServletResponse 예제 소스 STEP 1.1.2 RequestDispatcher 클래스 STEP 1.1.2.1 RequestDispatcher 예제 소스 개요 이번에는 서블릿 WebApplication에서 사용하는 포워딩 기법을 알아보기 위해서, 정리하려고 글을 남겨본다.\n잡설이지만, 원래는 포스팅을 올릴 때 한땀 한땀 쓰려고 노력하고 있는데 요즘에 너무 몰아쓰면서 전반…","frontmatter":{"categories":"개발","title":"Java Servlet Fowarding - 서블릿 포워딩을 어떻게 구현할까?","date":"July 10, 2019"},"fields":{"slug":"/hello-servlet-request/"}}},{"node":{"id":"343cceaf-52c2-583c-b523-aba9a0c29c4a","excerpt":"STEP 1.1 디렉토리 패턴 STEP 1.2 확장자 패턴 STEP 2.1 FrontController-pattern STEP 2.2 FrontController-pattern 예제 소스 STEP 3.1 Command-pattern STEP 3.2 Command-pattern 예제 소스 STEP 1. URI-pattern STEP 1.1 디렉터리 패턴 STEP 1.2 확장자 패턴 STEP 2. FrontController-pattern STEP 2.1 FrontController-pattern이란? STEP 2.2 FrontController-pattern 예제 소스 STEP 3. Command-pattern STEP 3.1 Command-pattern이란? STEP 3.2 Command-pattern 예제 소스 STEP 4. Review 개요 MVC 패턴을 통한 Servlet WebApplication을 만들 때 사용하는 주된 패턴 중에 하나이다.\n앞으로 계속해서 서블릿과 JSP…","frontmatter":{"categories":"개발","title":"FrontController & Command Pattern - 프론트 컨트롤러와 커맨드 패턴","date":"July 09, 2019"},"fields":{"slug":"/front-controller-and-command-pattern/"}}},{"node":{"id":"0c588027-74a3-5b30-8f05-e3a905c0576a","excerpt":"STEP 1.1 제어 역전(Inversion of Control)이란? STEP 1.2 Bean 등록 방법 STEP 1.3 의존성 주입(DI)란? STEP 2.1 관점 지향 프로그래밍(AOP)란? STEP 2.2 프록시 패턴이란? STEP 2.3 AOP 적용 예제 STEP 3.1 서비스 추상화(PSA)란? STEP 3.2 스프링 트랙잭션 STEP 1. 제어 역전(IoC, Inversion of Control) STEP 1.1 제어 역전(IoC)이란? STEP 1.2 Bean 등록 방법 STEP 1.3 의존성 주입(DI)란? STEP 2. 관점 지향 프로그래밍(Aspect Oriented Programming) STEP 2.1 관점 지향 프로그래밍(AOP)란? STEP 2.2 프록시 패턴이란? STEP 2.3 AOP 적용 예제 STEP 3. 서비스 추상화(Portable Service Abstraction) STEP 3.1 서비스 추상화(PSA)란? STEP 3.2 스프링 트랙잭션 …","frontmatter":{"categories":"개발","title":"Java Spring Triangle - 자바 스프링 핵심 3대 요소","date":"July 09, 2019"},"fields":{"slug":"/spring-triangle/"}}},{"node":{"id":"e7482c91-f609-52f3-9af6-551b817d377e","excerpt":"개요 오랜만에 쓰는 글입니다. 요 근래 정신이 너무 없어서 블로그 글도 못쓰고 있던 찰나에 인턴으로 근무하고 있는 회사에서 맡게 된 업무인 C# 암호화, Java 복호화에 대해서 설명하고자 합니다.  먼저, 저희회사에는 C#과 Java로 만들어지는 프로그램이 있었으며, 저는 그 사이에서 중간 단계 역할을 하는 인터페이스를 만드는 업무를 부여받았습니다. 일단, 인터페이스 이전에 제가 보안에는 문외한이였습니다. \n그래서 우선적으로 C# 암호화 후 Java에서 복호화를 처리하는 샘플 소스코드를 작성하게 됐습니다. AES Algorithms combined with Block Chipher mode in C# and Java STEP 1. 안전한 암호화 방식 STEP 1.1 암호의 종류 STEP 1.1.1 해시함수 STEP 1.1.2 대칭키 암호 방식 STEP 1.1.3 비 대칭키 암호 방식 STEP 1.1.4 정리 STEP 2. AES256 알고리즘이란? STEP 2.1 Dive int…","frontmatter":{"categories":"개발","title":"안전한 암호화를 위한 AES 알고리즘에 대한 이해와 구현코드(Java, C#)","date":"January 16, 2019"},"fields":{"slug":"/AES-Algorithm-and-Chiper-mode/"}}},{"node":{"id":"1cd38878-3f6c-54b0-89f4-36d2fed796e6","excerpt":"STEP 1 - Nginx설치하기 STEP 1.1 - Install Nginx using webtatic repo (비추천) STEP 1.1.1 EPEL설치하기 STEP 1.1.3 Webtatic저장소 설치하기 Troubleshooting SETP 1.2 - Install Nginx using Nginx official repo (추천) STEP 2 - Nginx를 사용하는 이유 STEP 2.1 - Nginx가상호스트설정 (동작안하니까 참고만 하자!!!) STEP 2.2 - Nginx & Apache Tomcat 리버스프록시설정 개요 이전장을 통해서 우리는 리눅스 상에서 jdk와 톰캣을 설치 및 환경설정을 하였다.\n이번 장에서는 nginx의 reverse proxy기능을 이용하여 톰캣과 엔진엑스를 연동하는 방법을 알아보도록하겠다. Nginx와 Apache Tomcat 연동하기 STEP 1 - Nginx설치하기 STEP 1.1 - Install Nginx using webtatic …","frontmatter":{"categories":"인프라","title":"리눅스(CentOS7)에서 자바 개발환경 구축하기 - Nginx와 Tomcat연동","date":"August 05, 2018"},"fields":{"slug":"/connect-nginx-with-tomcat/"}}},{"node":{"id":"c604142e-db9f-592d-b1da-f5a71022fd39","excerpt":"개요 Apache Tomcat STEP 1 - Apache Tomcat 다운로드 및 설치 STEP 2 - Apache Tomcat 환경변수 등록 및 추가 설정 STEP 2.1 - Apache Tomcat 환경변수 등록 및 방화벽 설정 STEP 2.2 - Tomcat 전용 리눅스 계정 생성 후 그 계정으로 Tomcat 실행하기 STEP 2.3 - Apache Tomcat 서비스 등록 및 시작데몬 등록 STEP 3 - Apache Tomcat CentOS7 firewalld 인바운드 룰 적용 및 index.jsp 페이지 확인 STEP 3.1 - CentOS7 firewalld 톰캣 포트 인바운드 룰 적용 STEP 3.2 - Hello Tomcat!! 마치면서 개요 이번 글은 Apache Tomcat 설치하고 Index.jsp 페이지인 고양이가 뛰어다니는 화면을 웹브라우저에 출력하는 것을 목표로 하겠다. Apache Tomcat 이전 글을 따라서 진행하는 사람이라면, Latest Ver…","frontmatter":{"categories":"인프라","title":"리눅스(CentOS7)에서 자바 개발환경 구축하기 - 톰캣 설치 및 환경설정","date":"July 04, 2018"},"fields":{"slug":"/install-tomcat-on-centos/"}}},{"node":{"id":"cccb5f3b-a6cf-5d87-9541-457da6aa9339","excerpt":"개요 운영체제 환경 리눅스 JDK 설치하기 JDK10 Install Using Downloaded JDK10 Binary file JDK10 Install Using Downloaded JDK10 RPM file 1.1 STEP 1 - JDK10 소스 다운로드하기 1.2 STEP 2 - JDK10 명령어 등록 1.3 STEP 3 - JDK10 설치 확인 2.1 STEP 1 - JDK10 RPM 다운로드하기 2.2 STEP 2 - JDK10 설치 하기 트러블 슈팅 마치면서 개요 오늘은 Centos7에서 Java 개발환경을 구성하는 첫번째 단추인 Java(JDK)를 설치 후에 환경변수까지 설정하는 것을 적어보려고 한다. 운영체제 환경 리눅스 리눅스 배포판 버전 리눅스 커널 버전 커널 버전과 배포판 버전은 위의 코드와 같이 CentOS-7.5버전과 3.10.0 커널을 사용한다. JDK 설치하기 초기에는 원래 JDK9을 설치하려 했으나, 나온지 얼마 안되서 Java10 으로 통합이 되었는…","frontmatter":{"categories":"인프라","title":"리눅스(CentOS7)에서 자바 개발환경 구축하기 - JDK10 설치하기","date":"July 03, 2018"},"fields":{"slug":"/install-jdk-on-centos/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"Bear","bio":{"role":"백엔드 엔지니어","description":["즐겁게 개발하는"],"thumbnail":"calcifer.gif"},"social":{"github":"https://github.com/brewagebear","linkedIn":"","email":"workingssu@gmail.com"}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437","3350743975"]}