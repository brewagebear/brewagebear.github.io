{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/AES-Algorithm-and-Chiper-mode/",
    "result": {"data":{"cur":{"id":"e7482c91-f609-52f3-9af6-551b817d377e","html":"<h1 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h1>\n<p>오랜만에 쓰는 글입니다. 요 근래 정신이 너무 없어서 블로그 글도 못쓰고 있던 찰나에 인턴으로 근무하고 있는 회사에서 맡게 된 업무인 C# 암호화, Java 복호화에 대해서 설명하고자 합니다.<br>  먼저, 저희회사에는 C#과 Java로 만들어지는 프로그램이 있었으며, 저는 그 사이에서 중간 단계 역할을 하는 인터페이스를 만드는 업무를 부여받았습니다.<br></p>\n<p>일단, 인터페이스 이전에 제가 보안에는 문외한이였습니다. <br>\n그래서 우선적으로 C# 암호화 후 Java에서 복호화를 처리하는 샘플 소스코드를 작성하게 됐습니다.</p>\n<h1 id=\"aes-algorithms-combined-with-block-chipher-mode-in-c-and-java\" style=\"position:relative;\"><a href=\"#aes-algorithms-combined-with-block-chipher-mode-in-c-and-java\" aria-label=\"aes algorithms combined with block chipher mode in c and java permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AES Algorithms combined with Block Chipher mode in C# and Java</h1>\n<ul>\n<li>STEP 1. 안전한 암호화 방식\n<ul>\n<li>STEP 1.1 암호의 종류\n<ul>\n<li>STEP 1.1.1 해시함수</li>\n<li>STEP 1.1.2 대칭키 암호 방식</li>\n<li>STEP 1.1.3 비 대칭키 암호 방식</li>\n<li>STEP 1.1.4 정리</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>STEP 2. AES256 알고리즘이란?\n<ul>\n<li>STEP 2.1 Dive into AES Algorithm</li>\n<li>STEP 2.2 Block Chipher mode of operation</li>\n</ul>\n</li>\n<li>STEP 3. 구현\n<ul>\n<li>STEP 3.1 C#</li>\n<li>STEP 3.2 Java</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"step-1-안전한-암호화-방식\" style=\"position:relative;\"><a href=\"#step-1-%EC%95%88%EC%A0%84%ED%95%9C-%EC%95%94%ED%98%B8%ED%99%94-%EB%B0%A9%EC%8B%9D\" aria-label=\"step 1 안전한 암호화 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 1. 안전한 암호화 방식</h2>\n<p>저는 말씀드린대로 보안에는 문외한이였습니다. 그래서 수 많은 문서를 보게되었고,\n그 중에서 <a href=\"https://d2.naver.com/helloworld/318732\">안전한 패스워드 저장 - Naver D2</a> 문서를 참고하게 됐습니다.</p>\n<p>해당 문서는 매우 좋은 문서라고 볼 수 있다고 저는 자부합니다.<br>\n이 문서는 패스워드를 저장하는 방식을 중점으로 다루긴하지만, 제가 사용했던 <strong>PBKDF2, Salt, SHA512</strong>에 대해서 많은 설명을 하고 있기에 많은 부분을 참고하게 됐습니다.</p>\n<h3 id=\"1-암호의-종류\" style=\"position:relative;\"><a href=\"#1-%EC%95%94%ED%98%B8%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"1 암호의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 암호의 종류</h3>\n<p><a href=\"https://seed.kisa.or.kr/iwt/ko/intro/EgovCryptographic.do\">암호이용활성화 - KISA</a>를 참고하면, 암호의 종류에는 <strong>대칭키 암호, 비 대칭키 암호, 해쉬함수</strong> 등이 있음을 알 수가 있다.</p>\n<h4 id=\"111-해쉬함수\" style=\"position:relative;\"><a href=\"#111-%ED%95%B4%EC%89%AC%ED%95%A8%EC%88%98\" aria-label=\"111 해쉬함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.1 해쉬함수</h4>\n<p>먼저, <strong>해쉬함수</strong>입니다.<br>\n다양한 해쉬함수들이 존재하는데 흔히 많이 아는 MD5, SHA-512등이 있다.</p>\n<p>특히, 개발자들은 <strong>단방향 해시 함수(one-way hash function)</strong> 으로 패스워드 생성을 많이 하는 것으로 알고 있다.<br>\n단방향 해시 함수의 특징을 설명을 하자면<br></p>\n<ol>\n<li>수학적인 연산을 통해 원본 메세지를 변환하여 암호화된 메세지인 다이제스트 생성</li>\n<li>암호화된 메세지로는 원본 메세지를 구할 수 없어야 하며, 이를 ‘단방향성’이라 한다.</li>\n</ol>\n<p>정도로 볼 수 있을 것 같다.\n<strong>즉, 암호화된 다이제스트로는 원본을 구할 수 없어야한다.</strong> 가 단방향 해시 함수의 핵심이라고 볼 수 있다.<br>\n단순하게 설명하자면, 해시는 암호화를 하는데 많이 이용될 뿐이지. 그 자체가 암, 복호화를 위한 목적으로 만들어진 함수가 아니다.\n<strong>즉, 복호화가 불가능하다! (자세한 내용은 비둘기집의 원리를 참고하자)</strong></p>\n<p>SHA-256의 예시를 들어보면 ‘hunter2’의 다이제스트는</p>\n<blockquote>\n<p>f52fbd32b2b3b86ff88ef6c490628285f482af15ddcb29541f94bcf526a3f6c7</p>\n</blockquote>\n<p>‘hunter3’의 다이제스트는</p>\n<blockquote>\n<p>fb8c2e2b85ca81eb4350199faddd983cb26af3064614e737ea9f479621cfa57a</p>\n</blockquote>\n<p>로 ‘hunter2’와 ‘hunter3’의 다이제스트는 완전히 다름을 알 수가 있다.\n그러나, 상기 설명한 Naver D2의 문서에서는 <strong>‘이것만으로는 패스워드 보안이 충분히 안전하다고 보장할 수 없다’</strong> 라고 얘기한다.</p>\n<p>그렇다면, 해쉬함수는 어떠한 문제를 가지고 있을까?</p>\n<ol>\n<li>\n<p><strong>인식가능성(recognizability)</strong><br>\n<strong>동일한 메시지가 언제나 동일한 다이제스트를 가진다면, 공격자가 다이제스트를 많이 확보, 탈취하여 다이제스트와 원본메세지를 찾거나 동일한 효과의 메세지를 찾을 수 있음.</strong></p>\n<p>공격자가 확보한 다이제스트 = rainbow table <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup><br>\n공격자가 raindow table을 활용하여 공격 = rainbow attack <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n</li>\n<li>\n<p><strong>속도(speed)</strong><br>\n해시 함수는 ‘자료구조’ 강의를 들었던 학부생이면 알겠지만, 해시테이블이라는 자료구조에서 사용하는 것으로 암호학에서 많이 사용되긴 하지만 본래의 목적은 <strong>“짧은 시간에 데이터를 검색하기 위한 것”</strong> 이다.<br> 따라서, 이러한 해시함수의 빠른 처리 속도를 활용하여 공격자는 매우 빠른 속도로 임의의 문자열의 다이제스트와 해킹할 대상의 다이제스트를 비교할 수 있다.</p>\n</li>\n</ol>\n<p><strong>그렇다면? 이러한 단점을 보완하는 방법이 있을까?</strong><br></p>\n<hr>\n<p><strong>1. Salting</strong><br>\n솔트(Salt)<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>는 단방향 해시 함수에서 다이제스트를 생성할 때 추가되는 바이트 단위의 임의의 문자열이다.<br> 이 솔트를 활용하여 원본 메세지에 문자열을 추가하여 다이제스트를 생성하는 것을 <strong>솔팅(Salting)</strong> 이라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">예를 들어, \"helloworld\"라는 원본 문자에 \"Dp5BnBuJzdKr3DpE\" 솔팅을 사용하여 다이제스트를 생성할 수가 있다. </code></pre></div>\n<blockquote>\n<p>Dp5BnBuJzdKr3DpE(salt) + helloworld (plainText) -> (Hash Function) -> DIGEST</p>\n</blockquote>\n<p>이 방법을 사용하면, 다이제스트를 알아낸다 한들, 공격자가 솔트도 알아야 된다.<br>\n더 나아가, 솔트가 각 패스워드마다 다를 경우에는 더욱 더 알아내기 힘들다.</p>\n<p>Naver D2 문서에서 제안하는 방식은 <strong>“모든 패스워드가 고유의 솔트를 갖고, 솔트의 길이가 32바이트 이상되는 것을 사용”</strong> 을 권고한다.</p>\n<p><strong>2. Key Stretching</strong></p>\n<p>키 스트레칭은 위의 단점 중에서 ‘속도’에 대한 단점을 해결하기 위해서 고안 된 것이다.<br> 핵심만 설명하자면, <strong>빠른 해시함수의 속도로 취약점이 발생한다면, 초기 다이제스트 생성 시 해시함수를 반복(Iteration)하여 시간 소요가 걸리게 하자!</strong> 라는 모티브에서 출발하였고, 일반적인 장비에서 0.2초 이상의 시간이 소요되게 설정한다.</p>\n<p>이는 Rainbow Attack뿐만 아니라 Brute-force Attack(무차별 대입 공격)<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup>으로 패스워드를 추측하는데 많은 시간이 소요되도록 하기 위한 것이다.</p>\n<p>Naver D2 문서에 따르면, 최긍에는 일반적인 장비로 1초에 50억 개 이상의 다이제스트를 비교할 수 있지만, 키 스트레칭을 적용하여 동일한 장비에서 1초에 5번 정도만 비교할 수 있게끔 하는 것이라 적혀있다.</p>\n<p>Salting과 Key Stretching을 이용하는 방식을 C#과 Java 코드로 표현하면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//Java Code</span>\n<span class=\"token comment\">//해당 키를 가지고 Salt 생성 후 SHA512 적용하여, 다이제스트 생성</span>\n<span class=\"token class-name\">MessageDigest</span> digest <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageDigest</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SHA-512\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> keyBytes <span class=\"token operator\">=</span> password<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> saltBytes <span class=\"token operator\">=</span> digest<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span>keyBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// in Java (65536번 해싱)</span>\n<span class=\"token class-name\">PBEKeySpec</span> pbeKeySpec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PBEKeySpec</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> saltBytes<span class=\"token punctuation\">,</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">//C# Code</span>\n<span class=\"token comment\">//해당 키를 가지고 Salt 생성 후 SHA512 적용하여, 다이제스트 생성</span>\n<span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> keyBytes <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> saltBytes <span class=\"token operator\">=</span> SHA512<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ComputeHash</span><span class=\"token punctuation\">(</span>keyBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// in C# (65536번 해싱)</span>\n<span class=\"token class-name\">Rfc2898DeriveBytes</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rfc2898DeriveBytes</span><span class=\"token punctuation\">(</span>keyBytes<span class=\"token punctuation\">,</span> saltBytes<span class=\"token punctuation\">,</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>3. Adaptive Key Derivation Functions</strong></p>\n<p>먼저 KDF(Key Derivation Function)<sup id=\"fnref-5\"><a href=\"#fn-5\" class=\"footnote-ref\">5</a></sup>란?</p>\n<p><strong>키를 파생시키는 함수</strong>라는 것이다.<br> 여기서 Adaptive Key Derivation Function은 다이제스트를 생성할 때 솔팅과 키 스트레칭을 반복하여, 솔트와 패스워드 외에도 입력 값을 추가하여 공격자가 쉽게 다이제스트를 유추할 수 없도록하고, 보안의 강도를 선택하는 Adaptive한 매커니즘을 KDF에 추가한 함수라고 볼 수가 있다.</p>\n<p>내가 사용했던 함수 하나를 소개해주고, 나머지 함수들은 궁금하면 Naver D2 문서를 참고하기를 바라겠다.</p>\n<ul>\n<li>\n<p>PBKDF2</p>\n<p>내가 뒤에서 보여줄 소스도 PBKDF2를 사용하여, 만든 키와 IV(초기화벡터)를 사용한다.<br>\n먼저, PBKDF2는 가장 유명한 AKDF로, 솔트를 적용한 후 해시 함수의 반복 횟수를 임의로 선택할 수 있다.<br> 아주 가볍고, 구현하기 쉬우며(보안의 문외한인 나같은 사람도 구현함.), SHA와 같이 검증된 해시 함수만을 사용한다.</p>\n<p>PBKDF2의 기본 파라미터는 5가지 이다.</p>\n<blockquote>\n<p>DIGEST = PBKDF2(PRF, Password, Salt, i, DLen);</p>\n</blockquote>\n<ul>\n<li>PRF      : 난수 (ex : HMAC)</li>\n<li>Password : 패스워드</li>\n<li>Salt     : 위에서 설명한 솔트</li>\n<li>i        : Iteration(반복) 횟수</li>\n<li>DLen     : 원하는 다이제스트 길이</li>\n</ul>\n</li>\n</ul>\n<p>PBKDF2는 NIST(미국표준기술연구소)에 의해서 승인된 알고리즘이고, 미국 정부 시스템에서도 사용자 패스워드의 암호화된 다이제스트를 생성할 때 사용한다.</p>\n<p>위의 소스를 보면 눈치 챘을 수도 있다.</p>\n<p><strong>Java에서 PBEKeySpec과 C#에서 Rfc2898DeriveBytes 클래스는</strong><br>\n<strong>HMACSHA1기반 의사 난수 생성기를 사용하여 암호 기반 키 파생 기능인 PBKDF2를 구현하는 클래스이다!!</strong></p>\n<h4 id=\"112-대칭키-암호-방식\" style=\"position:relative;\"><a href=\"#112-%EB%8C%80%EC%B9%AD%ED%82%A4-%EC%95%94%ED%98%B8-%EB%B0%A9%EC%8B%9D\" aria-label=\"112 대칭키 암호 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.2 대칭키 암호 방식</h4>\n<p>대칭 키 암호 방식의 핵심은 <strong>“같은 키를 가지고 암호화, 복호화를 진행한다”</strong> 이다.<br>\n즉, 내가 철수에게 암호화된 파일을 건내 받았는데 철수가 열쇠를 주지 않는다면 나는 영영 못열게 되는 암호방식이다.</p>\n<p>이는 아래 사진과 같다.</p>\n<div style=\"text-align: center\">\n<img src=\"https://dailyworker.github.io/assets/images/symmetric-key%20algorithm.jpg\">\n</div>\n<p>그리고 사진에서 말하는 대칭 키 알고리즘에 바로 <strong>AES 알고리즘</strong>이 포함되어있다.</p>\n<h4 id=\"113-비-대칭키-암호-방식\" style=\"position:relative;\"><a href=\"#113-%EB%B9%84-%EB%8C%80%EC%B9%AD%ED%82%A4-%EC%95%94%ED%98%B8-%EB%B0%A9%EC%8B%9D\" aria-label=\"113 비 대칭키 암호 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.3 비 대칭키 암호 방식</h4>\n<p>그렇다면? <strong>비대칭 키 암호 방식(= 공개 키 암호 방식)</strong><sup id=\"fnref-7\"><a href=\"#fn-7\" class=\"footnote-ref\">7</a></sup>은 무엇일까?<br>\n이는 나중에 포스팅을 하겠지만, 리눅스 SSH를 접근할 때 많이 사용되는 방식이다.\n일단, Password 접근 방식의 취약점인 무차별 대입 공격(Brute-force Attack)을 막을 수가 있으며, Password를 입력하지도 않아도 접근할 수 있는 편리함이 존재한다. (단 개인 키 생성시 암호를 입력했다면 개인 키의 암호를 입력해야함.)</p>\n<p>이는 아래 사진과 같습니다.</p>\n<div style=\"text-align: center\">\n<img src=\"https://dailyworker.github.io/assets/images/public-key_algorithm.jpg\">\n</div>\n<h4 id=\"114-정리\" style=\"position:relative;\"><a href=\"#114-%EC%A0%95%EB%A6%AC\" aria-label=\"114 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.4 정리</h4>\n<p>단방향 해시 함수는 <strong>‘OTP(One-Time Password)’</strong> 라고 생각하면 된다.<br>\n한번 생성했으면 다시는 복호화를 할 수가 없다.<br> 그렇다면? 어떻게 우리가 패스워드를 해시로 저장하면 로그인이 되는 것일까?<br> 단순하다. 저장된 DB의 해시 값과 로그인 버튼을 클릭했을 때 전송된 Password로 부터 생성된 해시값이 일치하면 로그인이 되는 것이다.<br> 그래서 대표적인 공격방식으로 사용자의 비밀번호 해시값과 동일한 해시값을 나타내는 공격이나 해시가 탈취당했을 때 많이 비밀번호로 사용하는 문자열을 해싱하여 비교하는 공격이 두가지가 존재한다.<br> 그래서 솔팅과 키 스트레칭이 매우 중요한 것이다!</p>\n<p>대칭 키 방식은 흔히 우리가 알고 있는 <strong>‘자물쇠’</strong> 를 생각하면 된다.<br>\n즉, 키를 잃어버리게 되면 잠긴 자물쇠는 풀 수가 없는 것이다.</p>\n<p>공개 키 방식은 <strong>서로 다른 두 개의 열쇠를 사용하는 새로운 자물쇠</strong> 라고 볼 수가 있다.<br>\n그러나 이 자물쇠는 하나의 열쇠로 잠궜으면 열 때는 <strong>반드시 잠근 것과는 다른 열쇠를 사용해아한다.</strong> <br>\n공개 키 방식은 추후에 업로드하게 될 SSH 로그인 없이 쓰기에서 좀 더 자세히 다뤄보도록하겠다.<br>\n(이번 포스트에서의 메인은 대칭 키 암호 방식!!)<br>\n그렇다면, <strong>대칭 키 암호 방식인 AES 알고리즘</strong>은 무엇일까?</p>\n<h2 id=\"step-2-aes256-알고리즘이란\" style=\"position:relative;\"><a href=\"#step-2-aes256-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80\" aria-label=\"step 2 aes256 알고리즘이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2. AES256 알고리즘이란?</h2>\n<p>글을 읽기 싫은 사람이면 여기를 보자 <a href=\"http://www.moserware.com/2009/09/stick-figure-guide-to-advanced.html\">AES Algorithm</a> 단, <strong>영어 만화</strong>이다!<br>\n혹은, <a href=\"https://www.youtube.com/watch?v=gP4PqVGudtg\">AES Rijndael Cipher explained as a Flash animation</a>를 참고하자.</p>\n<p>누누히 얘기하지만, 나 또한 암호학 전공자가 아닐뿐더러, <strong>“까라면 까야지”</strong> 하는 마음에서 급하게 구현을 했기 때문에 정말로 정확하게 알고리즘을 이해하고 쓰는 글은 아니다. 물론, 어느정도 이해를 하긴 했지만 나는 ‘구현’이 초점이였기 때문에 핵심적인 알고리즘보다는 어떻게 ‘동작’을 하는지에 초점을 두어서 설명하고자 한다.</p>\n<h3 id=\"step-21-dive-into-aes-algorithm\" style=\"position:relative;\"><a href=\"#step-21-dive-into-aes-algorithm\" aria-label=\"step 21 dive into aes algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2.1 Dive into AES Algorithm</h3>\n<ul>\n<li>역사<br>\nC#에서 보면 RijndaelManaged 클래스를 활용하여, AES 알고리즘을 적용하는데 나는 이게 어디서 파생된 것인지 궁금했다.<br>\n일단, AES는 Rijmen과 Daemen이 제안한 알고리즘이 AES 공모전에서 선정되면서 AES로 암호화 표준이 되었다. 즉, Rijndae는 만들었던 사람들의 앞의 3글자를 따서 만들어진 것이다.<br><br></li>\n<li><strong>세부 동작 원리</strong><br></li>\n</ul>\n<p>AES 알고리즘의 내부에는 Add Round Key, Sub Byte, Mix Column의 반복으로 이루어진다.<br> 동영상으로 보기 쉽게 보고 싶다면, <a href=\"https://www.youtube.com/watch?v=gP4PqVGudtg\">AES Rijndael Cipher explained as a Flash animation</a>를 추천한다.<br><br></p>\n<p>일단, <strong>AES-128, AES-192, AES-256</strong>이라는 단어를 많이 들어봤을 텐데 그것은 키의 길이로 결정된다.<br> 3종류의 키를 사용할 수 있는데 라운드 함수 또한, 128bit 키 사용시에는 10라운드, 192bit에서는 12라운드, 256bit에서는 14라운드를 실행한다.<br><br>\n전체적인 알고리즘은 아래의 사진과 같다. (왼쪽 : 암호화, 오른쪽 : 복호화)\n<br></p>\n<div style=\"text-align: center\"><img src=\"https://dailyworker.github.io/assets/images/AES-Encryption.jpg\">\n<img src=\"https://dailyworker.github.io/assets/images/AES-Decryption.jpg\">\n</div>\n<br>\n그리고 AES 알고리즘 라운드 내부에서는 4가지 연산이 존재한다. 1개의 자리바꿈 연산과 3개의 치환 연산인데 다음과 같다.<br><br>\n<ol>\n<li>S-Box : $GF(2^8)$을 이용한 치환연산</li>\n<li>Shift Row : 단순 자리바꿈</li>\n<li>Mix Column : $GF(2^8)$을 이용한 치환연산</li>\n<li>Add RoundKey : XOR 연산을 이용<br><br></li>\n</ol>\n<p>여기서 $GF(2^8)$을 이용한 계산이란 기약 다항식<sup id=\"fnref-8\"><a href=\"#fn-8\" class=\"footnote-ref\">8</a></sup> $m(x) = x^8+x^4+x^3+x+1$을 사용하는 다항식 체를 말한다.<br>위 네 가지 세부 연산은 모두 역이 가능하므로, 따라서 라운드 키를 적용하는 부분을 제외하고는 <strong>그 자체로 어떤 안전성도 제공하지 않는다.</strong></p>\n<hr>\n<ol>\n<li>\n<p><strong>상태(State)</strong></p>\n<p>AES의 모든 연산들은 상태라고 하는 2차원 바이트 배열에 수행.\n이 상태는 항상 4행으로 구성되며, 각 행은 $N_B$ 바이트로 구성된다.\nAES에서 입력을 상태로 변환하는 방법은 아래 사진과 같다.</p>\n</li>\n</ol>\n<div style=\"text-align: center\">\n<img src=\"https://dailyworker.github.io/assets/images/inputTostr.PNG\">\n</div>\n<p>예를 들어 128 비트 입력이 아래와 같다면, 결과 상태는 사진처럼 나온다.</p>\n<blockquote>\n<p>EA835CF00445332D655D98AD8596B0C5</p>\n</blockquote>\n<div style=\"text-align: center\">\n<img src=\"https://dailyworker.github.io/assets/images/16bitToState.PNG\">\n</div>\n<ol start=\"2\">\n<li>\n<p><strong>S-Box 치환</strong></p>\n<p>암호화 과정의 각 라운드에서 가장 먼저 수행되는 연산이다.\n2개의 S-Box가 존재 (전방향, 역방향) 두 S-Box는 서로 역 관계에 있으므로, 특정 바\n이트 값을  전방향 S-Box로 친환한 후에 다시 역방향 S-Box로 돌리면 원래 값을 얻게\n된다.</p>\n<p>전방향 S-Box는 암호화할 때 사용.\n역방향 S-Box는 복호화할 때 사용한다.</p>\n</li>\n<li>\n<p><strong>Shift Row(행이동 자리바꿈)</strong></p>\n<p>유일한 자리바꿈 연산인데 아래 그림과 같이 이루어진다.</p>\n<div style=\"text-align: center\">\n <img src=\"https://dailyworker.github.io/assets/images/Shift-Row.png\">\n</div>\n<p>복호화 할 때에는 정반대로 이루어진다.\n이 연산은 자리바꿈을 통해 암호화 과정이 평문에 모든 비트에 고루 영향을 주도록 위함이다.</p>\n</li>\n<li>\n<p><strong>Mix Column(열섞음 치환)</strong></p>\n<p>이 연산은 상태 행렬을 다음 행렬에 곱하여 값을 치환하게 되는데, 이 때 곱셈 연산은 $GF(2^8)$에서 계산된다.</p>\n</li>\n</ol>\n<p>$$\\begin{bmatrix} 02 &#x26; 03 &#x26; 01 &#x26; 01 \\ 01 &#x26; 02 &#x26; 03 &#x26; 01 \\ 01 &#x26; 01 &#x26; 02 &#x26; 03 \\ 03 &#x26; 01 &#x26; 01 &#x26; 02\\end{bmatrix} * \\begin{bmatrix} S \\end{bmatrix} = \\begin{bmatrix} S’ \\end{bmatrix} $$</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">위의 행렬을 두고, 계산 형태를 보여줄텐데 이 계산은 두 가지 형태로 계산 된다.</code></pre></div>\n<ul>\n<li><strong>실제 행렬 곱셈을 아래와 같이 진행.</strong> <br></li>\n</ul>\n<p>$$s’<em>{(0,0)} = (02 * s</em>{(0,0)})\\oplus(03 * s_{(1,0)})\\oplus(03 * s_{(2,0)})\\oplus(03 * s_{(3,0)})$$</p>\n<div style=\"text-align: center\">이 경우 이와 같은 계산을 16번 해야 한다.</div>\n<ul>\n<li><strong>입력 상태의 열을 아래와 3차 다항식으로 생각하여 진행.</strong></li>\n</ul>\n<p>$$s_0(x) = s_{(3,0)}x^3 + s_{(2,0)}x^2  + s_{(1,0)}x + s_{(0,0)}$$</p>\n<p>$x^4+1$에서 $a(x)=\\left{ 03 \\right}x^3+\\left{ 01 \\right}x^2+\\left{ 01 \\right}x+\\left{ 02 \\right}$에 곱하는 것이다.</p>\n<p>이렇게 하여 얻어진 3차 다항식의 각 계수는 출력 상태의 열이 된다.\n아래는 주어진 입력 상태에 열섞음 연산에 적용하는 결과를 보여준다.</p>\n<p>$$\\begin{bmatrix} 87 &#x26; F2 &#x26; 4D &#x26; 97 \\ 6E &#x26; 4C &#x26; 90 &#x26; EC \\ 46 &#x26; E7 &#x26; 4A &#x26; C3 \\ A6 &#x26; 8C &#x26; D8 &#x26; 95\\end{bmatrix} \\to \\begin{bmatrix} 47 &#x26; 40 &#x26; A3 &#x26; 4C \\ 37 &#x26; D4 &#x26; 70 &#x26; 9F \\ 94 &#x26; E4 &#x26; 3A &#x26; 42 \\ ED &#x26; A5 &#x26; A6 &#x26; BC\\end{bmatrix} $$</p>\n<p>이 예시에서 $s’_{(0,0)}$이 47이 되는 과정을 살펴보면 다음과 같다. (1번 풀이 사용)\n$$(\\left{ 02 \\right}\\times\\left{ 87 \\right})\\oplus(\\left{ 03 \\right}\\times\\left{ 6E \\right})\\oplus\\left{ 46 \\right}\\oplus\\left{ A6 \\right} = \\left{ 47 \\right}$$</p>\n<p>해당 내용의 증명과 내용은 <a href=\"http://index-of.co.uk/Cryptology/06-AES.pdf\">06-AES.pdf - index-of.co.uk</a>를 통해 자세히 볼 수가 있다.</p>\n<ol start=\"5\">\n<li>\n<p><strong>Add RoundKey</strong></p>\n<p>AES는 사용되는 암호키의 길이가 128비트면, 총 44개의 32비트 워드로 확장되어 각\n라운드마다 4개의 32비트 워드를 라운드 키로 사용한다.\n전체적인 알고리즘은 위의 그림과 같으며, 아래와 같이 진행된다.<br><br></p>\n<div style=\"text-align: center\">\n <img src=\"https://dailyworker.github.io/assets/images/addRound-Key.png\">\n</div>\n<ul>\n<li>\n<p>STEP1 : 128비트의 키를 4개의 32비트 워드로 바꾼다.</p>\n</li>\n<li>\n<p>STEP2 : 첫 4개의 워드 중 마지막 워드는 1바이트 왼쪽 순환 이동된 뒤 S-Box를 이용하여 치환된다. 그 다음에 라운드 상수와 XOR 된다.</p>\n</li>\n<li>\n<p>STEP3 : 첫 워드와 기존 4개의 워드 중 두 번째 워드가 XOR 되어 두번쨰 워드가 생성, 이 결과를 반복한다.</p>\n</li>\n<li>\n<p>STEP4 : STEP2~3을 9번 수행하여 각 라운드 키를 생성.</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>이렇게해서 AES 알고리즘이 내부적으로 어떻게 동작하는지 알게 됐다.\n<strong>허나, 여기서 끝난 것이 아니다!</strong></p>\n<hr>\n<h3 id=\"step-22-block-chipher-mode-of-operation\" style=\"position:relative;\"><a href=\"#step-22-block-chipher-mode-of-operation\" aria-label=\"step 22 block chipher mode of operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2.2 Block Chipher mode of operation</h3>\n<p>AES는 블록 암호 작동 모드(block cipher mode of operation)와 결합이되서 사용하는데 이는 비밀성이나 신뢰성과 같은 정보 서비스를 제공하기 위해 블록 암호를 사용하는 알고리즘이다.<sup id=\"fnref-8\"><a href=\"#fn-8\" class=\"footnote-ref\">8</a></sup><br> 블록 암호 자체는 블록이라고 하는 하나의 고정 길이 비트 그룹의 보안 암호화 변환에만 적합하다.<sup id=\"fnref-9\"><a href=\"#fn-9\" class=\"footnote-ref\">9</a></sup><br> 작동 방식은 블록보다 큰 데이터 양을 안전하게 변환하기 위해 암호의 단일 블록 작동을 반복적으로 적용하는 방법을 설명한다.</p>\n<p>대부분의 모드는 각 엄호화 작업에 흔히 IV(Initializtion Vector)<sup id=\"fnref-10\"><a href=\"#fn-10\" class=\"footnote-ref\">10</a></sup>라고 하는 고유한 바이너리 시퀀스를 필요로 한다.<br> IV는 반복되지 않아야 하며, 일부 모드의 경우 랜덤해야 한다. <strong>초기화 벡터는 동일한 일반 텍스트가 동일한 키로 여러 번 독립적으로 암호화되어도 별개의 암호 텍스트가 생성되도록 하기 위해 사용된다.</strong><sup id=\"fnref-11\"><a href=\"#fn-11\" class=\"footnote-ref\">11</a></sup><br>\n블록 암호 모드는 전체 블록에서 작동하며, 데이터의 마지막 부분이 현재 블록 크기보다 작으면 전체 블록에 패딩되어야 한다. (패딩을 필요로 하지 않는 모드도 존재)</p>\n<ul>\n<li>\n<p><strong>IV(Initialization Vector)</strong><br>\n우리가 알아야 할 핵심 **동일한 키에서 초기화 벡터를 사용하지 말자!**이다.<br>\nCBC의 경우, IV를 재사용하면 첫 번째 블록의 평문에 대한 정보와 두 메세지가 공유하는 공통 접두사가 누설될 수 있다.<br> OFB 혹은 CTR 모드의 경우 IV를 다시 사용하면 보안이 완전히 파괴된다.<sup id=\"fnref-11\"><a href=\"#fn-11\" class=\"footnote-ref\">11</a></sup><br>\n내가 코드로 구현한 모드는 CBC인데, CBC 모드에서는 IV는 암호화시 예측할 수 없어야 한다.<br> 메시지의 마지막 암호문 블록을 다음 메시지의 IV로 다시 사용하는 방법을 적용한다 하면 안전하지가 않다! <br>왜냐하면, 공격자가 다음 일반 텍스트를 지정하기 전에 IV를 알고 있으며 이전에 동일한 키로 암호화된 일부 블록의 일반 텍스트에 대한 추측할 수 있으며 공격으로 이어지기 때문이다.(TLS CBC IV Attack의 방식)<sup id=\"fnref-12\"><a href=\"#fn-12\" class=\"footnote-ref\">12</a></sup></p>\n</li>\n<li>\n<p><strong>Padding</strong><br>\n블록 암호는 고정된 블록 크기에서 작동하지만, 메세지는 다양한 길이로 나타난다.<br>\n좀 더 쉽게 얘기를 하자면, 데이터(메세지)를 블럭으로 암호화 할 때 평문이 항상 블럭 크기(일반적으로 64비트 / 128비트)의 배수가 되지 않을 경우가 존재한다.<br>\n패딩은 <strong>어떻게 평문의 마지막 블록이 암호화 되기 전에 데이터로 채워지는가를 확실히 지정하는 방법</strong> 이다. 복호화 과정에서는 패딩을 제거하고, 평문의 실제 길이를 지정하게 된다. <br><br>\n간단하게 설명하자면 <strong>암호 블록 사이즈와 데이터 사이즈가 맞지 않을 경우에 배수에 맞춰 빈공간을 채워주는 방식이라고 볼 수가 있다.</strong><br><br></p>\n<p>아래 PKCS#5와 PKCS#7의 예시를 보자.<br><br></p>\n<ul>\n<li>\n<p><strong>PKCS#5</strong><br>\n암호 블록 사이즈가 8바이트에 맞춰져있다.<br>\n8바이트의 배수로 인풋을 맞춰줘야하는데 패딩에 들어가는 문자는 패딩할 갯수가 들어간다.<br><br></p>\n<ul>\n<li>예시 <br></li>\n</ul>\n<p>AA 07 07 07 07 07 07 07  :  1바이트 데이터 + 7바이트 패딩 <br>\nAA BB 06 06 06 06 06 06  :  2바이트 데이터 + 6바이트 패딩 <br>\nAA BB CC 05 05 05 05 05  :  3바이트 데이터 + 5바이트 패딩 <br>\n주의 : 데이터가 8바이트인 경우에는 패딩이 필요 없어 보여도, 08을 8번 패딩한다.<br><br>\nAA A9 A8 A7 A6 A5 A4 A3 08 08 08 08 08 08 08 08  :  8바이트 데이터 + 8바이트 패딩</p>\n</li>\n<li>\n<p><strong>PKCS#7</strong>  <br>\n패딩할 숫자만큼 패딩 값을 채워넣어서 붙여주는 것은 PKCS#5와 동일.<br>\n따라서, 8바이트의 암호화 블럭 크기인 경우 <strong>PKCS#5 = PKCS#7</strong>이다.<br>\n하지만 현대의 암호화에서는 당연히 더 긴 암호화 블럭을 사용하기 때문에 달라진다.<br>\nAES256의 예를 들면, 256bit의 키를 사용하게 되고, 블럭 사이즈는 128bit이므로\n32바이트의 키와 16바이트의 암호화 블럭을 사용하게 된다. <br><br>\n이 상황에서 PKCS#7은 패딩이 최대 16개까지 가능하다.<br>\n(8바이트인 경우 08을 패딩 8번 하듯이 10으로 패딩 16번을 수행한다.)<br>\nPKCS#7은 최대 가능한 패딩은 FF이므로, 255개가 된다. <br><br></p>\n</li>\n</ul>\n<p><strong>두 개의 차이라 하면, PKCS#5는 8바이트 고정길이, PKCS#7은 1~255바이트의 가변길이이다.</strong><br><br></p>\n</li>\n<li>\n<p><strong>Common  modes</strong><br>\n위에서 설명한 내용을 토대로 그러면 어떠한 방식의 블록 암호 운용 방식이 존재하는지 설명하고자 한다. <br>여기서의 핵심은 <strong>“블록 암호는 특정한 길이의 블록 단위로 동작하기 때문에, 가변 길이 데이터를 암호화하기 위해서는 먼저 이들을 단위 블록들로 나누어야 하며, 그리고 그 블록들을 어떻게 암호화할지를 정해야 한다.”</strong> 이다.<br>\n간단히 얘기하자면, <strong>모드는 블럭 암호화 순서 및 규칙에 대한 표준이라고 보면 될 거 같다.</strong> <br><br></p>\n<ul>\n<li>\n<p><strong>ECB(Electronic CodeBook)</strong><br>\n가장 간단한 운용 방식을 가지며, 암호화하려는 평문 메세지를 여러 블록으로 나누어 각각 암호화하는 방식이다.<br>\nECB는 단점때문에 많이 사용을 안하는데 그 단점은 “같은 암호화 키”를 사용하는 것이다.\n<br>(확산의 부족, Lack of Diffusion)<br>\n즉, 평문 메세지를 여러 블록을 나누어서 암호화 하기때문에 만약, 암호화 메세지를 여러 부분을 나누었을 때 두 블록이 같은 값을 가진다면, 암호화한 결과 역시 같다라는 특징이 있으므로 공격자가 비슷한 메세지를 반복적으로 암호화하는 반복공격에 취약한 성질은 가진다. (확산의 부족으로 설명했는데 동일한 암호 텍스트로 암호화를 하므로, 데이터 패턴이 잘 숨겨지지가 않는다는 뜻)<br><br></p>\n<p>그 예시로 다음 그림을 참고하자.</p>\n<p><img src=\"https://dailyworker.github.io/assets/images/640px-ECB_encryption.svg.png\" alt=\"ECB 알고리즘\" title=\"ECB_encryption\"></p>\n<p>ECB모드가 비트맵 이미지를 암호화하는데 사용될 때를 보면, 각 개별 픽셀의 색상은 암호화되지만, 원본에서 동일한 색상의 픽셀 패턴이 암호화된 버전에 남아 있기 때문에 전체 이미지를 공격자가 인식할 수 있음을 보여준다.<br><br></p>\n<p><img src=\"https://dailyworker.github.io/assets/images/Ecb_encryption2.png\" alt=\"ECB 비트맵 적용\" title=\"ECB_encryption_apply_bitmap\"></p>\n</li>\n<li>\n<p><strong>CBC(Cipher-Block Chaining)</strong><br>\nCBC는 간단하게 알고리즘만 보자면, 각 블록은 암호화되기 전에 이전 블록의 암호화 결과와 XOR되는데,최초 시행 시에는 최초 평문 블럭과 IV를 XOR연산한다.<br>\n이를 끝까지 반복하는데 평문의 마지막 블럭은 패딩된 블럭이다.<br>\n<strong>이 때, IV가 같은 경우 출력 결과가 항상 같기 때문에, 매 암호화마다 다른 IV를 사용하는 것이 매우 중요하다.</strong></p>\n<p><img src=\"https://dailyworker.github.io/assets/images/640px-CBC_encryption.svg.png\" alt=\"ECB 알고리즘\" title=\"ECB_encryption\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"step-3-구현\" style=\"position:relative;\"><a href=\"#step-3-%EA%B5%AC%ED%98%84\" aria-label=\"step 3 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 3. 구현</h2>\n<p>쓰다보니 매우 장문의 글이 되버려서 참 난감하다. 하지만, 이 글을 천천히 여기까지 읽었던 독자분들이라면, 아래의 코드 또한 매우 쉽게 이해 할 수 있다고 다짐한다.</p>\n<h3 id=\"step-31-c-aes256cbcpkcs7\" style=\"position:relative;\"><a href=\"#step-31-c-aes256cbcpkcs7\" aria-label=\"step 31 c aes256cbcpkcs7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 3.1 C# (AES256/CBC/PKCS#7)</h3>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Cryptography</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Encryption</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">AES</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> keyStr <span class=\"token operator\">=</span> <span class=\"token string\">\"This is Key\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> vector <span class=\"token operator\">=</span> <span class=\"token string\">\"This is Vector\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Encrypt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\test\\\\100-Sales-Records.zip\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C:\\\\test\\\\100-Sales-RecordsEncrypted.enc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/**\n         * 32자리의 키값을 이용하여 Rfc2898DeriveBytes 생성\n         * @param  password                     절대 유출되서는 안되는 키 값이며, 이것으로 암호키를 생성\n         */</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Rfc2898DeriveBytes</span> <span class=\"token function\">MakeKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> password<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> keyBytes <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> saltBytes <span class=\"token operator\">=</span> SHA512<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ComputeHash</span><span class=\"token punctuation\">(</span>keyBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Rfc2898DeriveBytes</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rfc2898DeriveBytes</span><span class=\"token punctuation\">(</span>keyBytes<span class=\"token punctuation\">,</span> saltBytes<span class=\"token punctuation\">,</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/**\n         * 16자리의 초기화 벡터값을 이용하여 Rfc2898DeriveBytes 생성\n         * @param  iv                     절대 유출되서는 안되는 초기화 벡터 값이며, 이것으로 초기화벡터를 생성 \n         */</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Rfc2898DeriveBytes</span> <span class=\"token function\">MakeVector</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> vector<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> vectorBytes <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>vector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> saltBytes <span class=\"token operator\">=</span> SHA512<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ComputeHash</span><span class=\"token punctuation\">(</span>vectorBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Rfc2898DeriveBytes</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rfc2898DeriveBytes</span><span class=\"token punctuation\">(</span>vectorBytes<span class=\"token punctuation\">,</span> saltBytes<span class=\"token punctuation\">,</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/**\n         * 복호화 처리 레지달 알고리즘을 사용하여 AES256-CBC 구현.\n         * @param inputFile              암호화할 파일\n         * @param outputFile             복호화한 후의 파일명\n         * @Step\n         *  1. File.ReadAllBytes를 통하여 파일의 모든 Byte를 읽어들임.\n         *  2. csEncrypt를 활용하여 AES256-CBC로 Encrypte (PlainFile byte[] -> AES256 Encrypted byte[])\n         *  3. 해당 값을 메모리 스트림에 적재\n         *  4. msEncrypt.ToArray() : 메모리에 적재된 값을 배열로 읽어 byte[] encrypted에 적재. (AES256 Encrypted byte[])\n         *  5. AES256 Encrypted byte[] -> Base64 Encoded String\n         *  6. Base64 Encoded String Write on the dest File\n         */</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Encrypt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> dest<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RijndaelManaged</span> aes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RijndaelManaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//Create Key and Vector</span>\n                <span class=\"token class-name\">Rfc2898DeriveBytes</span> key <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span><span class=\"token function\">MakeKey</span><span class=\"token punctuation\">(</span>AES<span class=\"token punctuation\">.</span>keyStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Rfc2898DeriveBytes</span> vector <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span><span class=\"token function\">MakeVector</span><span class=\"token punctuation\">(</span>AES<span class=\"token punctuation\">.</span>vector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">//AES256</span>\n                aes<span class=\"token punctuation\">.</span>BlockSize <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n                aes<span class=\"token punctuation\">.</span>KeySize <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// It is equal in java </span>\n                <span class=\"token comment\">// Cipher _Cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");    </span>\n                aes<span class=\"token punctuation\">.</span>Mode <span class=\"token operator\">=</span> CipherMode<span class=\"token punctuation\">.</span>CBC<span class=\"token punctuation\">;</span>\n                aes<span class=\"token punctuation\">.</span>Padding <span class=\"token operator\">=</span> PaddingMode<span class=\"token punctuation\">.</span>PKCS7<span class=\"token punctuation\">;</span>\n                aes<span class=\"token punctuation\">.</span>Key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//256bit key</span>\n                aes<span class=\"token punctuation\">.</span>IV <span class=\"token operator\">=</span> vector<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//128bit block size</span>\n\n\n                <span class=\"token comment\">//processing Encrypt</span>\n                <span class=\"token class-name\">ICryptoTransform</span> encryptor <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span><span class=\"token function\">CreateEncryptor</span><span class=\"token punctuation\">(</span>aes<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">,</span> aes<span class=\"token punctuation\">.</span>IV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> encrypted<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MemoryStream</span> msEncrypt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MemoryStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CryptoStream</span> csEncrypt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CryptoStream</span><span class=\"token punctuation\">(</span>msEncrypt<span class=\"token punctuation\">,</span> encryptor<span class=\"token punctuation\">,</span> CryptoStreamMode<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> inputBytes <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllBytes</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        csEncrypt<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>inputBytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inputBytes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    encrypted <span class=\"token operator\">=</span> msEncrypt<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> encodedString <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToBase64String</span><span class=\"token punctuation\">(</span>encrypted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> encodedString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"step-31-java-aes256cbcpkcs7\" style=\"position:relative;\"><a href=\"#step-31-java-aes256cbcpkcs7\" aria-label=\"step 31 java aes256cbcpkcs7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 3.1 JAVA (AES256/CBC/PKCS#7)</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">example</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BadPaddingException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecretKeyFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IvParameterSpec</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PBEKeySpec</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecretKeySpec</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Key</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageDigest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoSuchAlgorithmException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvalidKeySpecException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Decryption</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> algorithm <span class=\"token operator\">=</span> <span class=\"token string\">\"AES\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Java에서는 PKCS#5 = PKCS#7이랑 동일</span>\n    <span class=\"token comment\">//자세한 내용은 http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html 참고.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> blockNPadding <span class=\"token operator\">=</span> algorithm <span class=\"token operator\">+</span> <span class=\"token string\">\"/CBC/PKCS5Padding\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"This is Key\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> IV <span class=\"token operator\">=</span> <span class=\"token string\">\"This is Vector\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">IvParameterSpec</span> ivSpec<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Key</span> keySpec<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setIvSpec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IvParameterSpec</span> ivSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Decryption</span><span class=\"token punctuation\">.</span>ivSpec <span class=\"token operator\">=</span> ivSpec<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setKeySpec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Key</span> keySpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Decryption</span><span class=\"token punctuation\">.</span>keySpec <span class=\"token operator\">=</span> keySpec<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MakeKey</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MakeVector</span><span class=\"token punctuation\">(</span>IV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Test-file \"100 Sales Records\" (5KB zip-file) downloaded at http://eforexcel.com/wp/downloads-18-sample-csv-files-data-sets-for-testing-sales/</span>\n        <span class=\"token comment\">// and encrypted (100-Sales-RecordsEncrypted.enc) using the unchanged C# code</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Decryption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:/test/100-Sales-RecordsEncrypted.enc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:/test/100-Sales-RecordsDecrypted.zip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 32자리의 키값을 이용하여 SecretKeySpec 생성\n     * @param  password                     절대 유출되서는 안되는 키 값이며, 이것으로 키스펙을 생성\n     * @throws UnsupportedEncodingException 지원되지 않는 인코딩 사용시 발생\n     * @throws NoSuchAlgorithmException     잘못된 알고리즘을 입력하여 키를 생성할 경우 발생\n     * @throws InvalidKeySpecException      잘못된 키 스펙이 생성될 경우 발생\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">MakeKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchAlgorithmException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvalidKeySpecException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//암호키를 생성하는 팩토리 객체 생성</span>\n        <span class=\"token class-name\">SecretKeyFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token class-name\">SecretKeyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PBKDF2WithHmacSHA1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//다이제스트를 이용하여, SHA-512로 단방향 해시 생성 (salt 생성용)</span>\n        <span class=\"token class-name\">MessageDigest</span> digest <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageDigest</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SHA-512\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// C# : byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(password);</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> keyBytes <span class=\"token operator\">=</span> password<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// C# : byte[] saltBytes = SHA512.Create().ComputeHash(keyBytes);</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> saltBytes <span class=\"token operator\">=</span> digest<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span>keyBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 256bit (AES256은 256bit의 키, 128bit의 블록사이즈를 가짐.)</span>\n        <span class=\"token class-name\">PBEKeySpec</span> pbeKeySpec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PBEKeySpec</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> saltBytes<span class=\"token punctuation\">,</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Key</span> secretKey <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">generateSecret</span><span class=\"token punctuation\">(</span>pbeKeySpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 256bit = 32byte</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">.</span><span class=\"token function\">getEncoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//AES 알고리즘을 적용하여 암호화키 생성</span>\n        <span class=\"token class-name\">SecretKeySpec</span> secret <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecretKeySpec</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"AES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setKeySpec</span><span class=\"token punctuation\">(</span>secret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 16자리 초기화벡터 입력하여 ivSpec을 생성한다.\n     * @param  IV                     절대 유출되서는 안되는 키 값이며, 이것으로 키스펙을 생성\n     * @throws UnsupportedEncodingException 지원되지 않는 인코딩 사용시 발생\n     * @throws NoSuchAlgorithmException     잘못된 알고리즘을 입력하여 키를 생성할 경우 발생\n     * @throws InvalidKeySpecException      잘못된 키 스펙이 생성될 경우 발생\n     * @\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">MakeVector</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> IV<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchAlgorithmException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvalidKeySpecException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SecretKeyFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token class-name\">SecretKeyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PBKDF2WithHmacSHA1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MessageDigest</span> digest <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageDigest</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SHA-512\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vectorBytes <span class=\"token operator\">=</span> IV<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> saltBytes <span class=\"token operator\">=</span> digest<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span>vectorBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 128bit</span>\n        <span class=\"token class-name\">PBEKeySpec</span> pbeKeySpec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PBEKeySpec</span><span class=\"token punctuation\">(</span>IV<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> saltBytes<span class=\"token punctuation\">,</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Key</span> secretIV <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">generateSecret</span><span class=\"token punctuation\">(</span>pbeKeySpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 128bit = 16byte</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> iv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>secretIV<span class=\"token punctuation\">.</span><span class=\"token function\">getEncoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">IvParameterSpec</span> ivSpec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IvParameterSpec</span><span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setIvSpec</span><span class=\"token punctuation\">(</span>ivSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 원본 파일을 복호화해서 대상 파일을 만든다.\n     * @param source 원본 파일\n     * @param dest 대상 파일\n     * @throws Exception\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">File</span> dest<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Cipher</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>blockNPadding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>DECRYPT_MODE<span class=\"token punctuation\">,</span> keySpec<span class=\"token punctuation\">,</span> ivSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fileProcessing</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 파일 복호화 처리\n     * @param source 원본 파일\n     * @param dest   대상 파일\n     * @param c      생성된 Cipher 객체 전달\n     * @throws Exception\n     * @Step\n     *  1. 생성한 파일의 버퍼를 읽어들임.\n     *  2. Base64 인코딩된 문자열 -> Base64 디코딩 Byte[]로 변환\n     *  3. Base64 디코딩 Byte[] -> Cipher.update를 사용하여 AES256 Decryption 실행\n     *  4. Cipher.doFinal()로 마지막 Padding을 추가.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fileProcessing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">File</span> dest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cipher</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">InputStream</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OutputStream</span> output <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            input <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            output <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> read <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>read <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bufferEncoded <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read <span class=\"token operator\">!=</span> buffer<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    bufferEncoded <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//버퍼에 읽힌 값을 bufferEncoded에 Array Copy</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bufferDecoded <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>bufferEncoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Base64 Decode</span>\n                output<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>bufferDecoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//AES256 Decryption</span>\n            <span class=\"token punctuation\">}</span>\n            output<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Last Padding add</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BadPaddingException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>output <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    output<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    input<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>코드를 보면, 돌아가는 코드이나 정말 수정될 부분들이 많은 코드이다.\n어떻게 하면 좀 더 보안성을 높을지는 충분히 이번 포스팅에 작성했다고 생각을 한다.</p>\n<p>만약, 이 코드를 실제 운영서버에 적용한다하면 말리고 싶다.\n허나, 더 좋은 코드로 탈바꿈하여 운영서버에 적용하기에는 좋다고 말하고 싶다. (저도 그러고 있습니다.)</p>\n<p>이상으로 포스팅을 마친다.</p>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REFERENCE</h1>\n<ol>\n<li><a href=\"https://d2.naver.com/helloworld/318732\">안전한 패스워드 저장 - Naver D2</a></li>\n<li><a href=\"https://seed.kisa.or.kr/iwt/ko/intro/EgovCryptographic.do\">암호이용활성화 - KISA</a></li>\n<li><a href=\"http://www.wikiwand.com/en/Block_cipher_mode_of_operation\">Block cipher mode of operation - Wikiwand</a></li>\n<li><a href=\"http://cryptocat.tistory.com/3\">공개키알고리즘 Part.1 - 카피캣의 쉬운 암호학</a></li>\n<li><a href=\"http://newstein03.tistory.com/1\">AES(ADVANCED ENCRYPTION STANDARD) 암/복호화 알고리즘 - 감파고</a></li>\n<li><a href=\"https://www.crocus.co.kr/1230\">AES 암호 알고리즘(Adavanced Encryption Standard) - Crocus</a></li>\n<li><a href=\"http://index-of.co.uk/Cryptology/\">06-AES.pdf - index-of.co.uk</a></li>\n<li><a href=\"http://jima.me/wp-content/uploads/2016/05/Advanced-Encryption-Standard-Wikipedia-the-free-encyclopedia.pdf\">Advanced Encryption Standard(AES), Federal Information Processing    Standards Publication  197,  Nov.  2001</a></li>\n<li><a href=\"http://devbible.tistory.com/451\">[Java] PKCS7padding NoSuchAlgorithmException - Tistroy</a></li>\n</ol>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><a href=\"https://en.wikipedia.org/wiki/Rainbow_table\">Rainbow Table - Wikipedia</a><a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-2\"><a href=\"https://en.wikipedia.org/wiki/Dictionary_attack\">Dictionary Attack - Wikipedia</a><a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-3\"><a href=\"https://en.wikipedia.org/wiki/Salt_(cryptography)\">Salt(cryptography) - Wikipedia</a><a href=\"#fnref-3\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-4\"><a href=\"https://en.wikipedia.org/wiki/Brute-force_attack\">Brute-force Attack - Wikipedia</a><a href=\"#fnref-4\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-5\"><a href=\"https://en.wikipedia.org/wiki/Key_derivation_function\">Key derivation function - Wikipedia</a><a href=\"#fnref-5\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-7\"><a href=\"https://ko.wikipedia.org/wiki/%EA%B3%B5%EA%B0%9C_%ED%82%A4_%EC%95%94%ED%98%B8_%EB%B0%A9%EC%8B%9D\">공개 키 암호 방식 - 위키백과</a><a href=\"#fnref-7\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-8\">NIST Computer Security Division’s (CSD) Security Technology Group (STG) (2013). “Block cipher modes”. Cryptographic Toolkit. NIST. Archived from the original on November 19, 2012. Retrieved April 12, 2013.<a href=\"#fnref-8\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-9\">Cryptography Engineering: Design Principles and Practical Applications. Ferguson, N., Schneier, B. and Kohno, T. Indianapolis: Wiley Publishing, Inc. 2010. pp. 63, 64. ISBN 978-0-470-47424-2.<a href=\"#fnref-9\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-10\"><a href=\"https://ko.wikipedia.org/wiki/%EC%B4%88%EA%B8%B0%ED%99%94_%EB%B2%A1%ED%84%B0\">초기화 벡터 - 위키백과</a><a href=\"#fnref-10\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-11\">Kuo-Tsang Huang, Jung-Hui Chiu, and Sung-Shiou Shen (January 2013). “A Novel Structure with Dynamic Operation Mode for Symmetric-Key Block Ciphers” (PDF). International Journal of Network Security &#x26; Its Applications (IJNSA). 5 (1): 19. Archived (PDF) from the original on 2015-11-22.<a href=\"#fnref-11\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-12\">B. Moeller (May 20, 2004), Security of CBC Ciphersuites in SSL/TLS: Problems and Countermeasures, archived from the original on June 30, 2012<a href=\"#fnref-12\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","excerpt":"개요 오랜만에 쓰는 글입니다. 요 근래 정신이 너무 없어서 블로그 글도 못쓰고 있던 찰나에 인턴으로 근무하고 있는 회사에서 맡게 된 업무인 C# 암호화, Java 복호화에 대해서 설명하고자 합니다.  먼저, 저희회사에는 C#과 Java로 만들어지는 프로그램이 있었으며, 저는 그 사이에서 중간 단계 역할을 하는 인터페이스를 만드는 업무를 부여받았습니다. 일단, 인터페이스 이전에 제가 보안에는 문외한이였습니다. \n그래서 우선적으로 C# 암호화 후 Java에서 복호화를 처리하는 샘플 소스코드를 작성하게 됐습니다. AES Algorithms combined with Block Chipher mode in C# and Java STEP 1. 안전한 암호화 방식 STEP 1.1 암호의 종류 STEP 1.1.1 해시함수 STEP 1.1.2 대칭키 암호 방식 STEP 1.1.3 비 대칭키 암호 방식 STEP 1.1.4 정리 STEP 2. AES256 알고리즘이란? STEP 2.1 Dive int…","frontmatter":{"date":"January 16, 2019","title":"안전한 암호화를 위한 AES 알고리즘에 대한 이해와 구현코드(Java, C#)","categories":"개발","author":"개발한입","emoji":"🧢"},"fields":{"slug":"/AES-Algorithm-and-Chiper-mode/"}},"next":{"id":"1cd38878-3f6c-54b0-89f4-36d2fed796e6","html":"<h1 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h1>\n<p>이전장을 통해서 우리는 리눅스 상에서 jdk와 톰캣을 설치 및 환경설정을 하였다.\n이번 장에서는 nginx의 reverse proxy기능을 이용하여 톰캣과 엔진엑스를 연동하는 방법을 알아보도록하겠다.</p>\n<h1 id=\"nginx와-apache-tomcat-연동하기\" style=\"position:relative;\"><a href=\"#nginx%EC%99%80-apache-tomcat-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0\" aria-label=\"nginx와 apache tomcat 연동하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nginx와 Apache Tomcat 연동하기</h1>\n<ul>\n<li>STEP 1 - Nginx설치하기\n<ul>\n<li>STEP 1.1 - Install Nginx using webtatic repo <strong>(비추천)</strong>\n<ul>\n<li>STEP 1.1.1 EPEL 설치하기</li>\n<li>STEP 1.1.2 Webatic 저장소 설치하기</li>\n<li>Troubleshooting</li>\n</ul>\n</li>\n<li>SETP 1.2 - Install Nginx using Nginx official repo <strong>(추천)</strong></li>\n</ul>\n</li>\n<li>STEP 2 - Nginx를 사용하는 이유\n<ul>\n<li>STEP 2.1 - Nginx 가상호스트 설정 <strong>(참고만 하자)</strong></li>\n<li>STEP 2.2 - Nginx reverse proxy Tomcat에 적용</li>\n</ul>\n</li>\n<li>REFERENCE</li>\n</ul>\n<hr>\n<h2 id=\"step-1---nginx설치하기\" style=\"position:relative;\"><a href=\"#step-1---nginx%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"step 1   nginx설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 1 - Nginx설치하기</h2>\n<h3 id=\"step-11---install-nginx-using-webtatic-repo-비추천\" style=\"position:relative;\"><a href=\"#step-11---install-nginx-using-webtatic-repo-%EB%B9%84%EC%B6%94%EC%B2%9C\" aria-label=\"step 11   install nginx using webtatic repo 비추천 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 1.1 - Install Nginx using webtatic repo <strong>(비추천)</strong></h3>\n<p>이번에는 바이너리 파일을 다운로드해서 설치하는게 아니라 webtatic이라는 프로그램을 통해서 최신 프로그램을 설치해보도록 하겠다.</p>\n<hr>\n<h4 id=\"step-111-epel설치하기\" style=\"position:relative;\"><a href=\"#step-111-epel%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"step 111 epel설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 1.1.1 EPEL설치하기</h4>\n<p>먼저 webtatic을 설치하기 위해서는 EPLE(Extra Pakage for Enterprise Linux) <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>라는 프로그램이 선행설치가 필요하다.\nEPLE에 대해서 간단히 설명하면, 우리가 쓰는 리눅스 OS는 RHEL계열 배포판인데 RHEL은 최신버전의 프로그램의 사용보다는 안정성을 최우선으로 한다. 따라서 패키지 업데이트가 잘 안되는데 이러한 것을 EPEL을 사용하여 해결할 수가 있다.</p>\n<p>간단히 얘기하면 yum에 없는 패키지나 최신버전이 아닌 패키지를 다운받을 수 있게하는 역할을 한다고 생각하면 된다.</p>\n<p>따라서 최신 패키지를 사용하기 위해서는 epel나 remi, webtatic 저장소를 이용하는게 편하다.</p>\n<p>설치법은 매우 간단하다.\nCentOS7 환경에서는 단순하게 아래의 명령어를 입력하면 된다.</p>\n<blockquote>\n<p>rpm -Uvh <a href=\"https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a></p>\n</blockquote>\n<p>실행결과는 아래와 같이 나온다.\n필자는 이미 설치되어서 이미 설치되어있다고 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">[root@AzureCentOS azureuser]# rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nRetrieving https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nwarning: /var/tmp/rpm-tmp.loyNno: Header V3 RSA/SHA256 Signature, key ID 352c64e5: NOKEY\nPreparing...                          ################################# [100%]</code></pre></div>\n<hr>\n<h4 id=\"step-113-webtatic저장소-설치하기\" style=\"position:relative;\"><a href=\"#step-113-webtatic%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"step 113 webtatic저장소 설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 1.1.3 Webtatic저장소 설치하기</h4>\n<p>다양한 확장 저장소가 있지만 (remi, IUS 등) 그것은 추후에 포스팅하도록하고, Nginx 최신안정버전을 받을 수 있는 webtatic을 이용해서 Nginx를 다운받기로 한다.</p>\n<blockquote>\n<p>이것은 밑에서 Nginx 공식저장소로 다운받는거에 비해서 권장되지는 않으나 이런게 있구나정도로 넘어가면 되겠다.</p>\n</blockquote>\n<p>epel과 마찬가지로 아주 쉽게 설치할 수가 있다.</p>\n<blockquote>\n<p>rpm -Uvh <a href=\"https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\">https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</a></p>\n</blockquote>\n<p>그 후에 yum repolist로 repository가 잘 등록되었는지 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">[root@AzureCentOS azureuser]# yum repolist\nLoaded plugins: fastestmirror\nRepository nodesource is listed more than once in the configuration\nRepository nodesource-source is listed more than once in the configuration\nLoading mirror speeds from cached hostfile\n * epel: mirror.premi.st\n * remi-safe: ftp.riken.jp\n * webtatic: sp.repo.webtatic.com\nrepo id                                        repo name \n...       </code></pre></div>\n<blockquote>\n<p>Loading mirror speeds from cached hostfile</p>\n</blockquote>\n<p>epel: mirror.premi.st<br>\nwebtatic: sp.repo.webtatic.com</p>\n<p>이런식의 문구가 나온다면 성공적으로 설치가 된 것이다.\n만일 저 문구가 나오지 않는다면,</p>\n<blockquote>\n<p>sudo  vi /etc/yum.repos.d/webtatic.repo</p>\n</blockquote>\n<p>명령어를 입력후에 <strong>enable=1</strong>로 수정한다.</p>\n<p>그리고 webtatic보다 nginx 공식 저장소를 추천하는 이유가 이제서야 나오는데 지금 글 작성 시점 (‘18.07.22)에서 nginx LTS버전은 <strong>1.14.0</strong>이다.\n하지만 webtatic 저장소의 버전 <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>은 1.10.3으로 레거시버전이다.\n이 버전을 이용하려는 사람은 설치해도 무방하나 왠만하면 nginx 공식 저장소를 이용한 설치를 추천한다.</p>\n<p>또한 1.10.3을 바로 설치하는 방법이 아니라 1.8버전을 설치 후  업그레이드 하는 방식 <sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>을 취한다.</p>\n<p>일단 yum말고 다른 저장소를 사용한다는데에 의의를 두고 (공부목적) 위에서 언급한 바와 같이</p>\n<blockquote>\n<p>“이런 방법이 있구나!!” 생각하고 넘어가자.</p>\n</blockquote>\n<p>만약 난 여기까지 왔고, 그냥 webtatic을 사용하여 설치하고 싶다는 분들을 위해서 계속해서 방법을 적어보도록 하겠다.</p>\n<p>이후의 단계는 Webtatic저장소를 이용하여 Nginx1.8를 설치 후에 1.10.3을 업그레이드하는 단계가 남아있다.</p>\n<p>먼저 webtatic저장소를 이용하여 설치하는 방법은 매우 간단하다 위의 단계를 착실히 수행했다면 아래의 명령어를 입력한다.</p>\n<blockquote>\n<p>yum install nginx18</p>\n</blockquote>\n<p>그러면 자신의 CentOS7에 nginx설치는 완료되며 관련 설정파일들은 (ex : nginx.conf) <strong>/etc/nginx</strong> 경로안에 있다.</p>\n<p>이제 바로 Nginx1.8버전을 1.10.3으로 업그레이드를 해보자!</p>\n<blockquote>\n<p>yum install yum-plugin-replace</p>\n</blockquote>\n<p>yum replace nginx18 —replace-with=nginx1w<br>\nsystemctl restart nginx</p>\n<p>위의 명령어를 입력하면 1.8 버전 nginx가 1.10.3으로 대체가 된다.</p>\n<p>해당 명령어로 업그레이드할 시에</p>\n<blockquote>\n<p>WARNING: Unable to resolve all providers …</p>\n</blockquote>\n<p>이러한 에러가 나오면 정상적인 상황이니까 당황하지말고 <strong>y</strong>를 입력하자!</p>\n<hr>\n<h4 id=\"troubleshooting\" style=\"position:relative;\"><a href=\"#troubleshooting\" aria-label=\"troubleshooting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Troubleshooting</h4>\n<p>만약 설치가 제대로 안된다면, 공식사이트에서는 해당 명령어를 입력해보는 것을 권장하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">yum shell\nremove nginx18\ninstall nginx1w\nrun\nsystemctl restart nginx</code></pre></div>\n<hr>\n<h3 id=\"setp-12---install-nginx-using-nginx-official-repo-추천\" style=\"position:relative;\"><a href=\"#setp-12---install-nginx-using-nginx-official-repo-%EC%B6%94%EC%B2%9C\" aria-label=\"setp 12   install nginx using nginx official repo 추천 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SETP 1.2 - Install Nginx using Nginx official repo (<strong>추천</strong>)</h3>\n<p>필자는 이 방법으로 Nginx를 설치하는것을 권장하고있다!</p>\n<p>RHEL 배포판에는 Nginx을 포함하고 있지않으므로, Nginx repo를 직접 추가해줘야한다.</p>\n<p>아래의 명령어를 따라하자!</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">[azureuser@AzureCentOS ~]$ sudo vi /etc/yum.repos.d/nginx.repo\n\n#vi 편집기를 연 후에 아래의 내용 작성\n\n[nginx]\nname=Nginx Repository \\$basearch - Archive \nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\nenabled=1\ngpgcheck=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\n\n#저장 후에 (wq) 제대로 적용됐는지 확인\n[azureuser@AzureCentOS ~]$ yum info nginx\nInstalled Packages\nName        : nginx\nArch        : x86_64\nEpoch       : 1\nVersion     : 1.14.0\nRelease     : 1.el7_4.ngx\nSize        : 2.6 M\nRepo        : installed\nFrom repo   : nginx\nSummary     : High performance web server\nURL         : http://nginx.org/\nLicense     : 2-clause BSD-like license\nDescription : nginx [engine x] is an HTTP and reverse proxy server, as well as\n            : a mail proxy server.</code></pre></div>\n<p>필자 같은 경우에는 설치가 되어있으므로, <strong>installed</strong>라고 나온다.\n1.14.0 (LTS)버전이 설치된 것을 확인할 수가 있다.</p>\n<p>설치 및 부팅시 자동 구동하도록 설정하기 위해서는</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">[azureuser@AzureCentOS ~]$ sudo yum install nginx\n\n#설치 완료 후 시작데몬 등록 \n[azureuser@AzureCentOS ~]$ sudo systemctl enable nginx\n[azureuser@AzureCentOS ~]$ sudo systemctl restart nginx</code></pre></div>\n<p>이렇게 하면 nginx 공식 저장소를 이용하여 nginx를 설치하는 것을 끝낼 수가 있다.</p>\n<hr>\n<h2 id=\"step-2---nginx를-사용하는-이유\" style=\"position:relative;\"><a href=\"#step-2---nginx%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"step 2   nginx를 사용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2 - Nginx를 사용하는 이유</h2>\n<p>Tomcat을 사용하는데 왜 Nginx를 굳이 쓸까? 하는 이유를 갖는 사람들이 많을 것이다.\n일단 먼저 차이점을 알아야한다. Tomcat은 서블릿 컨테이너를 포함한 WAS(Web Application Server)이다. Nginx는 강력하고 단순한 웹서버로서 특히, 가상호스트 설정과 리버스 프록시를 구축하는데 자주 사용되는 웹서버이다.</p>\n<p>즉, 사용자의 Http 요청은 Http Server(= Web Server)로 받은 후에 다시 웹서버가 WAS에 필요한 내용을 전달한 후에 WAS에서 처리 후에 다시 웹서버가 클라이언트에게 표현하는 식으로 구현하는 것이다.</p>\n<p><img src=\"../assets/images/EFD108B9-A993-4AFA-8473-4EDF05EE6AD6.png\" alt=\"웹서버와 WAS의 처리 방법\"></p>\n<p>해당 내용은 이미지인 출처인 <a href=\"http://gap85.tistory.com/45\">WAS와 웹서버의 차이</a>에서 자세하게 확인할 수가 있다. 간단하게 설명하자면, 톰캣은 동적 서버콘텐츠를 수행하고, 웹서버는 정적 서버콘텐츠를 수행한다는 점이다.</p>\n<p>그리고 Nginx는 가장 큰 장점인 매우 쉬운 가상호스트 설정으로 하나의 서버에서 여러개의 웹서버를 구동함하는 장점을 갖는다.</p>\n<p><img src=\"../assets/images/EF22FD5B-744C-4780-9D1A-BCF9FF7AEDB8.gif\" alt=\"Nginx 가상호스트\"></p>\n<p>위의 도식표를 보면 이해가 될 것이다.\n사용자가 news에 대한 요청을 하면 해당 도메인에 엮인 부분을 Nginx가 읽고, 해당 디렉토리에 있는 콘텐츠를 응답하고, blog에 대한 질의를 하면 blog 디렉토리에 있는 콘텐츠를 응답한다.</p>\n<p>그리고 Reverse Proxy는 액세스 포인트를 주어서 각기 다른 도메인을 사용해도, 한 액세스 포인트에서 로그관리와 클라이언트 요청에 맞게 url 매핑을 하는 기능을 수행한다.</p>\n<p>아래의 그림을 보자.\n<img src=\"../assets/images/CF80CCA8-CE9D-4D9E-8B08-918D6F03CEAA.png\" alt=\"Nginx 리버스프록시\"></p>\n<p>위와 같은 도식을 통해서 Reverse Proxy의 장점을 정리하자면 아래와 같이 볼 수가 있다.</p>\n<ol>\n<li>서버의 부하를 덜어줄수 있는 로드 밸런싱 처리</li>\n<li>각 서버의 부하를 덜어준 만큼 웹서버 속도 증대</li>\n<li>보안과 익명성</li>\n<li>중앙 집중식 log 작성과 감시</li>\n<li>캐쉬사용</li>\n</ol>\n<p>위와 같은 기능을 아주 쉽게 Nginx가 제공한다는 것이다.\n따라서, 앞으로는 가상호스트 설정 및 리버스프록시 설정을 해보자한다.</p>\n<hr>\n<h3 id=\"step-21---nginx가상호스트설정-동작안하니까-참고만-하자\" style=\"position:relative;\"><a href=\"#step-21---nginx%EA%B0%80%EC%83%81%ED%98%B8%EC%8A%A4%ED%8A%B8%EC%84%A4%EC%A0%95-%EB%8F%99%EC%9E%91%EC%95%88%ED%95%98%EB%8B%88%EA%B9%8C-%EC%B0%B8%EA%B3%A0%EB%A7%8C-%ED%95%98%EC%9E%90\" aria-label=\"step 21   nginx가상호스트설정 동작안하니까 참고만 하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2.1 - Nginx가상호스트설정 <strong>(동작안하니까 참고만 하자!!!)</strong></h3>\n<p>우분투와 달리 (우분투는 sites-enabled/ 디렉토리 아래에 해당 가상호스트 설정을 집어 넣으면 끝이다.) RHEL 배포판은 가상호스트 설정을 하기가 좀 불편하다.</p>\n<p>이번에는 CentOS7에서도 우분투처럼 가상호스트를 관리하기 위한 설정을 해보고자 한다.\n일단, 우리가 설치한 Nginx의 경로는 <em>/etc/nginx</em>이다.\n아래의 폴더에 가상호스트를 관리하기위한 설정을 해보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">[azureuser@AzureCentOS nginx] sudo mkdir /etc/nginx/sites-available/\n[azureuser@AzureCentOS nginx] sudo mkdir /etc/nginx/sites-enabled/</code></pre></div>\n<p>이후 Nginx의 설정파일인 Nginx.conf를 수정하는데 자세한 내용은\n<a href=\"http://technerd.tistory.com/19\">Nginx의 기본 구성</a>으로 대체하겠다.\n만일 필요하다면 필요한 부분을 따로 포스팅하도록 하겠다.</p>\n<p>주요 설정 부분만 정리하자면 아래와 같다.</p>\n<p><strong>worker_processes</strong> : 별도의 프로세스로 구동되어 실제 처리를 하는 프로세스의 갯수. cpu의 core 갯수를 확인한 후 이 숫자대로 주는게 좋다.</p>\n<p><strong>worker_connections</strong> : 워커 프로세스당 동시에 처리할 수 있는 연결 갯수. 기본 값 768</p>\n<p><strong>max_clients</strong>= <strong>worker_processes</strong> * <strong>worker_connections</strong></p>\n<p>기본 설정예시는\n<a href=\"https://www.nginx.com/resources/wiki/start/topics/examples/full/#nginx-conf\">Nginx Full Example Configuration</a>을 참고할 수 있다.</p>\n<p>필자는 이런식으로 사용하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\"># For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\nuser  nginx;\nworker_processes  4;\nerror_log  /var/log/nginx/error.log;  \npid        /var/run/nginx.pid;\n \nevents {\n    worker_connections  2048;\n}\n \nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n  access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    server_tokens off;\n    gzip  on;\n    gzip_disable &quot;msie6&quot;;\n    ##\n    # SSL Settings\n    ##\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE\n    ssl_prefer_server_ciphers on;\n    # Virtual Host Configs\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}</code></pre></div>\n<p>만약, <a href=\"http://www.aaa.com%EA%B3%BC\">www.aaa.com과</a> <a href=\"http://www.bbb.com%EC%9D%B4%EB%9D%BC%EB%8A%94\">www.bbb.com이라는</a> 두 개의 도메인을 한 서버에서 동작하기 위해서는 아래와 같이 한다.</p>\n<p>필자는 3가지의 파일을 만들었는데</p>\n<ol>\n<li>default (tomcat upstream 파일)</li>\n<li><a href=\"http://www.aaa.com\">www.aaa.com</a> (<a href=\"http://www.aaa.com\">www.aaa.com</a> 가상호스트 설정 파일)</li>\n<li><a href=\"http://www.bbb.com\">www.bbb.com</a> (<a href=\"http://www.bbb.com\">www.bbb.com</a> 가상호스트 설정 파일)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">    [root@AzureCentOS nginx]# cd sites-enabled/\n    [root@AzureCentOS sites-enabled]# vi default\n    \n    # default 파일\n    upstream tomcat {\n     server  127.0.0.1:8080  fail_timeout=0;\n    }\n\n    [root@AzureCentOS sites-enabled]# vi www.aaa.com \n    #www.aaa.com 설정파일\n          location / {\n                  proxy_redirect off;\n                  proxy_pass_header Server;\n \n                  proxy_set_header Host $http_host;\n                  proxy_set_header X-Forwarded-Proto $scheme;\n                  proxy_set_header X-Forwarded-Port $server_port;\n                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                  proxy_set_header X-Real-IP $remote_addr;\n                  proxy_set_header X-Scheme $scheme;\n                  proxy_pass http://tomcat;\n                  charset utf-8;\n          }\n    }\n\n    [root@AzureCentOS sites-enabled]# vi www.bbb.com\n    #www.bbb.com 설정파일\n         location / {\n                  proxy_redirect off;\n                  proxy_pass_header Server;\n \n                  proxy_set_header Host $http_host;\n                  proxy_set_header X-Forwarded-Proto $scheme;\n                  proxy_set_header X-Forwarded-Port $server_port;\n                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                  proxy_set_header X-Real-IP $remote_addr;\n                  proxy_set_header X-Scheme $scheme;\n                  proxy_pass http://tomcat;\n                  charset utf-8;\n          }\n    }</code></pre></div>\n<p>이런식으로 설정 한 후에 tomcat의 server.xml 파일을 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">[root@AzureCentOS nginx]# cd /opt/tomcat/\n[root@AzureCentOS tomcat]# vi conf/server.xml\n&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;\n               connectionTimeout=&quot;20000&quot;\n               URIEncoding=&quot;UTF-8&quot;\n               address=&quot;127.0.0.1&quot; (기존 server.xml에서 추가)\n               redirectPort=&quot;8443&quot; /&gt;\n\n...\n    #호스트 설정\n    &lt;Host name=&quot;www.aaa.com&quot; appBase=&quot;/var/www/aaa&quot; autoDeploy=&quot;true&quot;  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;\n              &lt;Context path=&quot;/&quot; docBase=&quot;&quot; reloadable=&quot;true&quot; /&gt;\n      &lt;/Host&gt;\n      &lt;Host name=&quot;www.bbb.com&quot; appBase=&quot;/var/www/bbb&quot; autoDeploy=&quot;true&quot;  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;\n              &lt;Context path=&quot;/&quot; docBase=&quot;&quot; reloadable=&quot;true&quot; /&gt;\n      &lt;/Host&gt;\n  &lt;/Engine&gt;\n  &lt;/Service&gt;\n&lt;/Server&gt; </code></pre></div>\n<p>이런식으로 설정하는 것이 가상 호스트이다.\n이번에는 server.xml의 호스팅을 이용하여 멀티도메인을 적용했지만, 차후에 무중단 배포를 구현하는 와중에 따로 또 톰캣과 Nginx를 뜯어 고칠 것이니 참고만하자.</p>\n<hr>\n<h3 id=\"step-22---nginx--apache-tomcat-리버스프록시설정\" style=\"position:relative;\"><a href=\"#step-22---nginx--apache-tomcat-%EB%A6%AC%EB%B2%84%EC%8A%A4%ED%94%84%EB%A1%9D%EC%8B%9C%EC%84%A4%EC%A0%95\" aria-label=\"step 22   nginx  apache tomcat 리버스프록시설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2.2 - Nginx &#x26; Apache Tomcat 리버스프록시설정</h3>\n<p>이번에는 아주 간단한 리버스프록시를 구현해보려한다.</p>\n<p>Nginx는 css, html, js같은 파일만 처리하고, jsp처리는 tomcat에 맡기는 식으로 리버스프록시를 설정하려고 한다.</p>\n<p>즉, 정적콘텐츠는 Nginx가 처리하고, 동적콘텐츠는 Tomcat이 처리하는 부분이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">[root@AzureCentOS conf.d]# cd /etc/nginx/conf.d/\n[root@AzureCentOS conf.d]# vi tomcat.conf\nupstream tomcat {\n    ip_hash;\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name www.server.com server.com;\n    access_log /var/log/nginx/test1.log;\n\nlocation / {\n        root /usr/share/nginx/html;\n        index index.html index.htm index.jsp;\n    }\n\n    location ~ \\.(css|js|jpg|jpeg|gif|htm|html|swf)$ {\n        root /usr/share/nginx/html;\n        index index.html index.htm;\n    }\n\n    location ~ \\.(jsp|do)$ {\n    index index.jsp;\n        proxy_pass http://tomcat;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-NginX-Proxy true;\n        proxy_set_header Host $http_host;\n    \n    proxy_redirect off;\n    charset utf-8;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}</code></pre></div>\n<p>설정파일을 설명하자면</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">location ~ \\.(css|js|jpg|jpeg|gif|htm|html|swf)$ {\n        root /usr/share/nginx/html;\n        index index.html index.htm;\n    }</code></pre></div>\n<p>위의 부분은 css, js, html등 기타 명시된 확장자의 경우 /usr/share/nginx/html에서 불러오겠다는 뜻이 된다.\n따라서 위의 확장자명에 해당하는 파일을 tomcat의 ROOT에 둘 경우에는 무시가 된다.\n즉, Tomcat은 온전히 <em>.do에 해당하는 액션이나 jsp파일을 처리하기만 한다.</em></p>\n<p>그러한 설정부분을 보자면</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">location ~ \\.(jsp|do)$ {\n    index index.jsp;\n        proxy_pass http://tomcat;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-NginX-Proxy true;\n        proxy_set_header Host $http_host;\n    \n    proxy_redirect off;\n    charset utf-8;\n    }</code></pre></div>\n<p>위의 코드를 통하여 해당 질의를 수행한다고 볼 수가 있다.\n이렇게 설정된 리버스프록시는 톰캣은 동적인 처리를 맡고, Nginx는 정적 처리를 맡음으로서 부하 분산을 할 수 있다는 장점이 있다!</p>\n<p>다음장에서는 아래와 같은 멀티도메인 리버스프록시 도식과 같은 서버를 구축해보는 것을 무중단 배포 구현을 통해서 해보도록 하겠다.\n<img src=\"../assets/images/D6A49F05-D5B6-4978-8CA9-590EC0EEEC83.png\" alt=\"mulit-domain-reverse-proxy\"></p>\n<hr>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REFERENCE</h1>\n<ol>\n<li><a href=\"https://conory.com/blog/42596\">Yum 저장소 추가하기</a></li>\n<li><a href=\"https://www.lesstif.com/pages/viewpage.action?pageId=6979743\">RHEL/CentOS 5,6,7 에 EPEL 과 Remi/WebTatic Repository 설치하기</a></li>\n<li><a href=\"https://itrend.site/7/nginx%EC%97%90%EC%84%9C-%EB%A9%80%ED%8B%B0%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%9A%B4%EC%98%81%ED%95%98%EA%B8%B0-%EA%B0%80%EC%83%81%ED%98%B8%EC%8A%A4%ED%8A%B8virtual-host-%EC%84%A4%EC%A0%95%EB%B2%95/\">NGINX에서 멀티사이트 운영하기 – 가상호스트(Virtual Host) 설정법</a></li>\n<li><a href=\"http://webdir.tistory.com/241\">우분투 NGINX(엔진엑스) 가상호스트 설정</a></li>\n<li><a href=\"http://sungbine.github.io/tech/post/2015/02/15/tomcat%EA%B3%BC%20apache%EC%9D%98%20%EC%97%B0%EB%8F%99.html\">WAS와 웹서버의 차이 – 톰캣과 아파치를 구별하지 못하는 사람을 위해</a></li>\n<li><a href=\"http://akal.co.kr/?p=1173\">nginX에서 reverse proxy(리버스 프록시) 사용하기</a></li>\n</ol>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><del><a href=\"https://fedoraproject.org/wiki/EPEL\">https://fedoraproject.org/wiki/EPEL</a></del><a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-2\"><del><a href=\"https://webtatic.com/tags/nginx/\">https://webtatic.com/tags/nginx/</a></del><a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-3\"><del><a href=\"https://webtatic.com/packages/nginx110/\">https://webtatic.com/packages/nginx110/</a></del><a href=\"#fnref-3\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","frontmatter":{"date":"August 05, 2018","title":"리눅스(CentOS7)에서 자바 개발환경 구축하기 - Nginx와 Tomcat연동","categories":"인프라","author":"개발한입","emoji":"🧢"},"fields":{"slug":"/connect-nginx-with-tomcat/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://brewagebear.github.io","comments":{"utterances":{"repo":"brewagebear/blog-comments"}}}}},"pageContext":{"slug":"/AES-Algorithm-and-Chiper-mode/","nextSlug":"/connect-nginx-with-tomcat/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}