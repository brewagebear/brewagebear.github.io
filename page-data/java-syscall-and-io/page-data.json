{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/java-syscall-and-io/",
    "result": {"data":{"cur":{"id":"b614bede-83e9-59c1-93bb-7b6881b7d0f9","html":"<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#step-11-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%99%80-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C\">STEP 1.1 운영체제와 시스템 콜</a></p>\n</li>\n<li>\n<p><a href=\"#step-21-io-%ED%96%A5%EC%83%81%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EC%88%98%EC%A4%80%EC%9D%98-%EA%B8%B0%EC%88%A0\">STEP 2.1 I/O 향상을 위한 운영체제 수준의 기술</a></p>\n<ul>\n<li><a href=\"#step-211-%EB%B2%84%ED%8D%BCbuffer\">STEP 2.1.1 버퍼(Buffer)</a></li>\n<li><a href=\"#step-212-scattergather\">STEP 2.1.2 Scatter/Gather</a></li>\n<li><a href=\"#step-213-%EA%B0%80%EC%83%81%EB%A9%94%EB%AA%A8%EB%A6%AC\">STEP 2.1.3 가상메모리</a></li>\n<li><a href=\"#step-214-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%A7%B5-%ED%8C%8C%EC%9D%BC-memory-mapped-io\">STEP 2.1.4 메모리 맵 파일 (Memory-mapped I/O)</a></li>\n<li><a href=\"#step-215-%ED%8C%8C%EC%9D%BC-%EB%9D%BD\">STEP 2.1.5 파일 락</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#step-41-%EC%9E%90%EB%B0%94%EC%9D%98-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EB%B2%84%ED%8D%BC-%EB%8F%84%EC%9E%85\">STEP 4.1 자바의 포인터 버퍼 도입</a></p>\n</li>\n<li>\n<p><a href=\"#step-42-%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-io-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EC%A0%9C%EA%B3%B5-%EC%B1%84%EB%84%90-%EB%8F%84%EC%9E%85\">STEP 4.2 네이티브 I/O 서비스를 제공 채널 도입</a></p>\n</li>\n<li>\n<p><a href=\"#step-43-%EC%85%80%EB%A0%89%ED%84%B0-%EB%8F%84%EC%9E%85\">STEP 4.3 셀렉터 도입</a></p>\n</li>\n</ul>\n</div>\n<h1 id=\"시스템-콜과-자바에서의-시스템-콜-사용례\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C%EA%B3%BC-%EC%9E%90%EB%B0%94%EC%97%90%EC%84%9C%EC%9D%98-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C-%EC%82%AC%EC%9A%A9%EB%A1%80\" aria-label=\"시스템 콜과 자바에서의 시스템 콜 사용례 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템 콜과 자바에서의 시스템 콜 사용례</h1>\n<h1 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h1>\n<ul>\n<li>개요\n<ul>\n<li>STEP 1. 시스템 콜이란?\n<ul>\n<li>STEP 1.1 운영체제와 시스템 콜</li>\n</ul>\n</li>\n<li>STEP 2. 자바와 시스템 콜\n<ul>\n<li>STEP 2.1 I/O 향상을 위한 운영체제 수준의 기술\n<ul>\n<li>STEP 2.1.1 버퍼(Buffer)</li>\n<li>STEP 2.1.2 Scatter/Gather</li>\n<li>STEP 2.1.3 가상메모리</li>\n<li>STEP 2.1.4 메모리 맵 파일(MMIO)</li>\n<li>STEP 2.1.5 파일 락</li>\n</ul>\n</li>\n<li>STEP 2.2 중간정리</li>\n</ul>\n</li>\n<li>STEP 4. 자바에서의 블록킹 I/O와 논블로킹 I/O 차이\n<ul>\n<li>STEP 4.1 자바의 포인터 버퍼 도입</li>\n<li>STEP 4.2 네이티브 I/O 서비스를 제공 채널 도입</li>\n<li>STEP 4.3 셀렉터 도입</li>\n</ul>\n</li>\n<li>STEP 3. REFERENCE</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h1>\n<p>최근에 CS를 다시 공부하면서 궁금한 점이 많아졌다. 특히 그 부분 중에서 제일 컸던 부분은 시스템 콜 부분이었다. 운영체제를 공부하면서 많은 학부생들이나 개발자들이 느끼는 감정이 그래서 이게 어디서 쓰이는데 혹은 어디에 접목할 수 있는데 일 것이다.</p>\n<p>예를 들면 프로세스와 쓰레드도 그렇다고 생각한다. 단순하게 <code class=\"language-text\">synchorized</code> 키워드를 붙어서 동기화 처리를 한다고 생각하지만, <code class=\"language-text\">synchorized</code> 키워드를 사용할 경우에는 자바에서는 세마포어를 추상화 시킨 모니터라는 개념을 통해서 동시성 제어를 하게된다.</p>\n<p>이번에 CS를 공부하면서 초점을 맞춘 부분도 이론으로 배운 운영체제 내용들이 실제로 우리가 개발하는데 어떤 방식으로 사용되는지 궁금해졌고, 그 중에서 시스템 콜에 대해서 내용을 다루기로 생각했다.</p>\n<h1 id=\"step-1-시스템-콜이란\" style=\"position:relative;\"><a href=\"#step-1-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C%EC%9D%B4%EB%9E%80\" aria-label=\"step 1 시스템 콜이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 1. 시스템 콜이란?</h1>\n<p>일단, 시스템 콜은 <strong>사용자 프로세스가 커널 프로세스에게 어떠한 문맥을 요청하면서 발생하는 것</strong>이다.</p>\n<p>이를 알기 전에 약간의 운영체제 지식이 필요하니 운영체제에 대해서 조금 훑고 가고자 한다.</p>\n<h2 id=\"step-11-운영체제와-시스템-콜\" style=\"position:relative;\"><a href=\"#step-11-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%99%80-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C\" aria-label=\"step 11 운영체제와 시스템 콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 1.1 운영체제와 시스템 콜</h2>\n<p>운영체제의 사용 목적은 다음과 같다.</p>\n<ul>\n<li><strong>사용자가 편리하게 컴퓨터 시스템을 편리하게 사용할 수 있는 환경을 제공</strong></li>\n<li><strong>컴퓨터 시스템 안의 하드웨어를 효율적으로 관리하기 위함</strong></li>\n</ul>\n<p>그렇다면 이러한 궁금증이 들 수 있다고 생각한다.</p>\n<blockquote>\n<p>어떻게 하드웨어를 효율적으로 관리하고, 편리하게 사용할 수 있는 환경을 제공할까?</p>\n</blockquote>\n<p>오늘날 대부분의 운영체제는 시분할 시스템이다. <strong>시분할 시스템은 일련의 작업들을 시간단위로 나눠서 처리</strong>한다. 이 작업들은 운영체제에서 자원을 할당받아서 돌아가는 프로세스이다.</p>\n<p>이 시간 단위가 매우 짧기 때문에 사용자 입장에서는 여러 프로그램들을 운영체제에서 실행해도 동시에 실행되는 것 처럼 느껴진다.</p>\n<p>즉, 프로세스는 <strong>운영체제 위에서 실행 중인 프로그램</strong>이라고 볼 수 있다.\n당연히 이러한 환경이다보니 어떤 프로세스의 자원 처리나 하드웨어 작업 등의 처리가 나날이 복잡해졌다.</p>\n<p>우리가 C언어를 사용할 때 생각해보자. 어떠한 메모리를 할당받았으면 반드시 프로그래머는 해당 구문이 더 이상 메모리가 필요가 없다면 <code class=\"language-text\">free()</code> 를 처리해서 자원을 반납해줬어야했다.</p>\n<p>하지만, Java와 같은 언어들은 <code class=\"language-text\">GC(Garbage Collection)</code>을 지원하면서 자원 반납에 대한 프로그래머의 부담을 해소시켜줬다.</p>\n<p>운영체제도 그러한 편리함을 제공해준다고 봐도 무방하지 않을까 생각이 든다.\n일례면 우리가 크롬을 켜두고 유튜브로 음악을 들으면서 워드로 문서 작업을 하고 있다고 생각해보자. 우리는 자원의 할당이나 반납을 생각하지 않고 사용하면 된다.</p>\n<p>위에서 나온 운영체제의 목적 중에서  <strong>사용자가 편리하게 컴퓨터 시스템을 편리하게 사용할 수 있는 환경을 제공</strong> 이 부분이라고 생각해도 될 것 같다.</p>\n<p>물론 가끔 너무 많은 리소스를 사용하면 해당 프로그램이 먹통이 되서 대기를 해야된다던가 강제 종료를 하는 부분이 존재하긴 하지만, 평소에 사용할 때는 아무 신경을 쓰지않는다. 이건 운영체제가 알아서 자원을 할당하고 처리해주기 때문이다.</p>\n<p>정리를 하자면, <strong>운영체제는 사용자가 자원의 관리나 할당에 신경을 쓰지 않고 처리할 수 있는 것들을 제공해서 편리하게 사용자들이 쓸 수 있게 해준다.</strong></p>\n<p>자 그러면 다시 생각해보자.</p>\n<blockquote>\n<p>엥 우리가 C로 짤때 <code class=\"language-text\">malloc</code> 과 같은 것으로 직접 메모리를 할당받고 그랬는데 이건 운영체제의 역할 아닌가요?</p>\n</blockquote>\n<p>정답이다.</p>\n<p>운영체제는 크게 2가지 모드로 프로세스를 동작시킨다.</p>\n<ol>\n<li>사용자 모드(User mode)</li>\n<li>커널 모드(Kernel mode)</li>\n</ol>\n<p>물론 크게 2가지로 나눠지는 것이고, 더 세분화된 모드들이 많다. 일단 위의 두 가지의 모드로만 봐보자.</p>\n<p>1은 우리가 <strong>사용하는 대부분의 프로그램들이 동작하는 모드</strong>이다.\n2는 <strong>운영체제 내부의 커널이 관리하는 프로세스의 모드</strong>이다.</p>\n<p>운영체제 수업때 돌이켜서 생각하면 운영체제가 보안적인 측면도 관리해준다고 교수님 혹은 조교(?)님께서 얘기해줬을 때가 있다. 운영체제는 커널 모드를 통해서 외부의 접근을 최소화해야하는 영역을 지정해두고 보안성을 높였다. 이 부분이 커널모드인 것이다.</p>\n<p><strong>사용자 모드가 커널 영역에 직접 접근하는 것이 아니라 운영체제에게 요청을 하면 해당 처리를 운영체제에 위임을 해서 처리하도록 하였다.</strong></p>\n<p>이것이 바로 <strong>시스템 콜</strong>이다.</p>\n<p>재밌는 만화가 있으니 참고해보자.\n<a href=\"https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&#x26;blogId=sheep_horse&#x26;logNo=221271778167\">유저영역과 커널영역 혹은 유저모드와 커널모드 : 네이버 블로그</a></p>\n<p>따라서, 우리가 C를 사용하면서 <code class=\"language-text\">malloc</code> 과 같은 명령어를 수행하면 내부적으로 시스템 콜이 발생해서 운영체제에게 이 요청을 위임한다.\n운영체제는 해당 명령어를 해석하고 할당해서 완료가 되면 해당 프로세스에게 알려주고 다시 프로세스는 사용자 모드로 동작한다.</p>\n<p>중요한 점은 단순하게 메모리 용량 할당 뿐만 아니라 I/O 작업이나 네트워크 작업 등 커널 영역이 필요한 모든 곳에서는 시스템 콜이 필요하다.</p>\n<p>즉, 우리가 사용하는 프로세스는 수 없이 많이 <strong>사용자모드와 커널모드</strong>를 왔다갔다하면서 작업을 수행하는 것이다.</p>\n<p>자 이제 시스템 콜에 대해서 얼추 알게되었다. 그렇다면 자바에서 주로 시스템 콜이 발생하는 부분은 어디일까? 제일 보편적인 것이 I/O 작업이라고 할 수 있다.</p>\n<p>이제 이것에 대해 알아보고자 한다.</p>\n<h1 id=\"step-2-자바와-시스템-콜\" style=\"position:relative;\"><a href=\"#step-2-%EC%9E%90%EB%B0%94%EC%99%80-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C\" aria-label=\"step 2 자바와 시스템 콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2. 자바와 시스템 콜</h1>\n<p>자바와 시스템 콜의 내용을 언급하기 이전에 JVM 내용이 들어갈 예정이니 <a href=\"https://brewagebear.github.io/fundamental-jvm-classloader/\">Java JVM과 Class Loader의 동작 과정 이해 - 개발 한입</a>를 한번 보고오는 것도 추천한다.</p>\n<p>위에서는 C의 예시를 들어서 시스템 콜을 얘기했다. C는 포인터를 통해서 메모리에 직접 접근할 수 있다보니 시스템 콜이 다이렉트로 발생시킬 수 있다고 할 수 있다. 물론 이 때문에 포인터를 사용해서 어떠한 작업을 한 뒤에 자원 반납을 프로그래머가 직접 작성해야되는 문제점이 있다.</p>\n<p>하지만, Java는 JVM 위에서 동작을 한다. 그렇기 때문에 시스템 콜 자체가 느려질 수 있는 상황이다.</p>\n<p>큰 차이점을 대략적으로 그림을 그려보았다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/22961251/159037748-447ecfb1-b145-4541-bb9c-f935267041f9.png\" alt=\"79A34C97-4FED-433C-8BD1-9CE861DD37CD\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/22961251/159037763-4b35b28c-b08e-43c6-9ebf-17b197f02dba.png\" alt=\"E19A384D-C163-4042-8226-751983FA0FBE\"></p>\n<p>C의 경우에는 메모리 할당하는 부분이고, Java의 경우에는 디스크에서 파일을 읽을 때라고 가정한다.</p>\n<p>개략적으로 그린 그림이라 어떤차이인지 잘 모를 수 있다고 생각한다. 핵심은 C의 경우에는 시스템 콜을 직접 사용할 수 있지만 (<code class=\"language-text\">malloc</code> 이 시스템콜은 아니고 시스템 콜을 사용하는 API이다.) 자바의 경우에는 간접적으로 사용해야된다.</p>\n<p>만약 C로 I/O를 한다하면 아래와 같은 흐름으로 시스템 콜이 발생할 것이다.</p>\n<p><code class=\"language-text\">C 프로세스 -> 시스템 콜 -> 커널 -> 디스크 컨트롤러 -> 데이터 복사</code></p>\n<p>자바는 아래와 같은 흐름으로 이뤄진다.</p>\n<p><code class=\"language-text\">JVM -> JNI -> 시스템 콜 -> 커널 -> 디스크 컨트롤러 -> 커널 버퍼 복사 -> JVM 버퍼 복사</code></p>\n<p>즉, 시스템 콜을 사용하기 위해서 자바는 내부적으로 네이티브 메서드를 활용하기 때문에</p>\n<p>어떻게보면 JVM이라는 한 껍데기가 더 씌워져있기도 하고 내부에 버퍼가 존재하는데 여기서는 파일 읽기를 처리한다고 가정하였다. 이때 읽기 요청을 한 쓰레드가 디스크에서 프로세스 내부 버퍼로 복사를 할 때 Blocking이 발생하기도 한다.</p>\n<p>이 부분을 그림으로 표현하면 다음과 같다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/22961251/159037775-75bd8b44-9391-4bc0-bc8f-5ada04f28bf5.png\" alt=\"sync-blocking\"></p>\n<p>이렇게 <code class=\"language-text\">read()</code> 명령동안 해당 쓰레드는 작업을 못하게 되는 것이다.\n이러한 부분때문에 <strong>자바 IO는 느리다</strong> 라는 얘기가 나오게되었다.</p>\n<p>이러한 부분을 개선한 것이 <code class=\"language-text\">nio</code> 패키지인데 이를 보기 전에 느린 I/O를 처리하기하기 위해서 운영체제는 많은 기능을 제공하는데 다음을 알아보고자 한다.</p>\n<h2 id=\"step-21-io-향상을-위한-운영체제-수준의-기술\" style=\"position:relative;\"><a href=\"#step-21-io-%ED%96%A5%EC%83%81%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EC%88%98%EC%A4%80%EC%9D%98-%EA%B8%B0%EC%88%A0\" aria-label=\"step 21 io 향상을 위한 운영체제 수준의 기술 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2.1 I/O 향상을 위한 운영체제 수준의 기술</h2>\n<p>자바 혹은 다른 언어를 사용하더라도 결국 <strong>시스템 콜</strong>을 사용하는 I/O는 느릴 수 밖에 없다. 그래서 운영체제는 이 I/O 향상을 위한 다양한 기술들을 제공하는데 크게 다음과 같다.</p>\n<ol>\n<li>버퍼(Buffer)</li>\n<li>Scatter/Gather</li>\n<li>가상메모리(Virtual Memory)</li>\n<li>메모리 맵 파일</li>\n<li>파일 락</li>\n</ol>\n<p>이를 각각 살펴보고자 한다.</p>\n<h3 id=\"step-211-버퍼buffer\" style=\"position:relative;\"><a href=\"#step-211-%EB%B2%84%ED%8D%BCbuffer\" aria-label=\"step 211 버퍼buffer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2.1.1 버퍼(Buffer)</h3>\n<p>먼저 버퍼를 설명하기 앞서 시스템 콜 영역을 좀 더 세부적으로 그려보면 다음과 같다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/22961251/159037786-47c7eb77-f8f0-401d-ab9b-97b1326e28fa.png\" alt=\"C216A603-6E1C-4B6A-BB34-80AED5EA0952\"></p>\n<p>유저 영역과 커널 영역에서 버퍼를 사용하는 모습을 볼 수 있다.\n여기서 DMA(Direct Memory Access)<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> 와 Disk Controller(I/O Controller)<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> 는 운영체제 내용이니 넘어가고자 한다.</p>\n<p>버퍼는 무엇이고, 왜 사용하는 것일까?\n아주 단순하다 데이터를 하나씩 여러번 반복적으로 전달하는 것보다 중간에 버퍼를 두고 그 버퍼에 데이터를 모아 한 번에 효율적이기 때문이다.</p>\n<p>즉, 버퍼는 효율적으로 데이터를 전달하는 객체이다.\n따라서, 데이터를 전송하는 곳에서 대부분 버퍼를 사용하는데 운영체제도 예외는 아니다.</p>\n<p>버퍼의 이점을 알아보기 위해 세 가지 코드로 테스트 해보고자 한다.</p>\n<ol>\n<li>버퍼를 사용하지 않고 1바이트씩 10MB 파일을 읽어들임</li>\n<li>2048byte 크기의 버퍼를 만들어서 10MB 파일을 읽어들임</li>\n<li>10MB 크기의 버퍼를 만들어서 10MB 파일을 읽어들임</li>\n</ol>\n<p>먼저 버퍼를 사용하지 않는 코드를 볼텐데 코드는 다음과 같다.</p>\n<ul>\n<li>버퍼를 사용하지 않고 1바이트씩 10MB 파일을 읽어들임</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotUsedBuffer</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> COPY_ORIGIN_FILE <span class=\"token operator\">=</span> <span class=\"token string\">\"/Users/liquid.bear/Downloads/test.txt\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> COPY_DEST_FILE <span class=\"token operator\">=</span> <span class=\"token string\">\"/Users/liquid.bear/Downloads/test2.txt\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>COPY_ORIGIN_FILE<span class=\"token punctuation\">,</span> COPY_DEST_FILE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> endTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"버퍼를 사용하지 않을 경우 처리 시간 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>endTime <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" milli seconds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> origin<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> dest<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">OutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> byteData <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>byteData <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>byteData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">test.text</code> 파일은 10MB 크기의 파일이다.\n맥을 사용하고 있다면 <code class=\"language-text\">mkfile -n 10m test.txt</code> 이런식으로 원하는 크기의 파일을 아주 손쉽게 만들 수 있다.</p>\n<p>핵심은 <code class=\"language-text\">copy()</code> 메서드 내부의 <code class=\"language-text\">while</code> 문이다. 1바이트씩 읽으면서 파일 쓰기를 처리하고 있다.</p>\n<p>다음은 2048byte 크기의 버퍼를 통해서 복사하는 예시이다.</p>\n<p>달라진 부분은 크게 없다 <code class=\"language-text\">BufferedInputStream inputBuffer = new BufferedInputStream(in, 2048);</code> 를 추가해서 읽기 버퍼를 추가했을 뿐이다.</p>\n<p>궁금한 점이 있을 수 있다</p>\n<blockquote>\n<p>왜 BufferedOutputStream은 사용하지 않았나요?</p>\n</blockquote>\n<p>즉, 쓰기 또한 1바이트씩 읽어서 쓰는게 아니라 버퍼에 담아두고 <code class=\"language-text\">EOF</code> 를 만났을 때 버퍼에 쓰인 값을 한번에 쓰는게 훨씬 빠를 것이다. 이 예시는 단순히 읽기 버퍼만 사용한 이유는 시간 값 차이를 확인하기 위함이라고 알아두면 될 것이다. (쓰기 버퍼를 쓰면 차이가 현저히 적어진다.)</p>\n<p>일단 먼저 두 개의 파일 복사 시간 차이를 확인해보자.</p>\n<img width=\"402\" alt=\"Screen Shot 2022-03-18 at 17 14 21\" src=\"https://user-images.githubusercontent.com/22961251/158962217-f810a078-0fd4-49bb-9b58-ff818828e15f.png\">\n<img width=\"399\" alt=\"Screen Shot 2022-03-18 at 17 14 16\" src=\"https://user-images.githubusercontent.com/22961251/158962219-2aed57ed-c18c-4252-a839-6e4befe2f511.png\">\n<p>생각보다 큰 차이를 보임을 알 수 있다. 그러면 읽기 버퍼를 파일 사이즈만큼 했을 때는 얼마나 빠를까?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>중략<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">int</span> available <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bufferSize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>available<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> byteData <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bufferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>중략<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>이런식으로 읽은 파일 크기 만큼 버퍼를 사용하도록 하였다.\n그렇다면 버퍼에 10MB 크기 전체가 읽힐 것이고, <strong>이 속도는 한번에 읽고 한번에 쓰기가 가능한 속도가 될 것이다.</strong></p>\n<img width=\"363\" alt=\"Screen Shot 2022-03-18 at 17 14 06\" src=\"https://user-images.githubusercontent.com/22961251/158962225-439e7937-90c2-4f68-bda6-04a05fc9f871.png\">\n<p>따라서 속도는 제일 빠르게 된다.</p>\n<p>전체 코드는 <a href=\"https://github.com/brewagebear/blog-example/tree/main/buffer-example/src/main/java\">blog-example/buffer-example</a> 을 참고해보자.</p>\n<p>이렇게 버퍼를 사용하지 않는 경우와 사용하는 경우는 I/O 속도차이가 꽤 난다는 것을 알 수 있다. 버퍼는 운영체제 뿐만 아니라 I/O가 많은 DB같은데서도 사용하는데 3번 예시와 같이 전체 파일의 크기로 버퍼를 만들면 당연히 <code class=\"language-text\">OOM</code> 발생 가능성이 존재하니 이를 테이블 데이터나 인덱스 크기에 맞춰서 적절한 값으로 튜닝하기도 한다.</p>\n<h3 id=\"step-212-scattergather\" style=\"position:relative;\"><a href=\"#step-212-scattergather\" aria-label=\"step 212 scattergather permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2.1.2 Scatter/Gather</h3>\n<p>위에서는 버퍼에 대해서 알아보았다. 그렇다면 Scatter와 Gather는 어떤 기능을 제공해줄까?</p>\n<p>만약, 내가 버퍼를 N개를 만들어서 사용하는데 동시에 I/O 작업이 이뤄진다고 가정해보자. 그렇다면, N번의 시스템 콜이 일어날 수 있다고 추론할 수 있다. 시스템 콜은 문맥교환과 비교해서 적은 비용이지만 그렇다고 비용이 아예 발생하지 않는 건 아니다.</p>\n<p>이렇게 <strong>N번의 시스템 콜을 요청하는 경우 당연히 비효율적</strong>이라고 볼 수 있다.\n이러한 문제 때문에 운영체제는 Scatter와 Gather를 제공해준다.</p>\n<ul>\n<li>Scattering Read</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/22961251/159037807-6943164b-3068-4792-b8d5-e1256da1e5e6.png\" alt=\"6DDE1098-1B1C-4795-B28F-4B94F4D314B7\"></p>\n<ul>\n<li>Gathering Write</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/22961251/159037824-91d11a3b-dfdb-47a5-b0ae-eafa9f0120ae.png\" alt=\"5BED0995-D5D5-4FA1-BCF7-107038B13A7B\"></p>\n<p>Scatter와 Gather의 흐름은 위의 그림과 같다.\n이를 통하면 시스템 콜이 1번만 발생한다. 대신, 내부적으로 호출할 때마다 사용할 버퍼의 주소 목록을 넘겨줌으로서, 주어진 버퍼들로부터 순차적으로 읽거나 쓴다.</p>\n<p>자바에서는 이런 기능을 이용하기 위해서 <code class=\"language-text\">java.nio.channel</code> 패키지에\n<code class=\"language-text\">ScatteringByteChannel</code> 과 <code class=\"language-text\">GatheringByteChannel</code> 을 제공해준다.</p>\n<ul>\n<li>java.nio.channel.ScatteringByteChannel</li>\n</ul>\n<img width=\"435\" alt=\"Screen Shot 2022-03-18 at 17 59 20\" src=\"https://user-images.githubusercontent.com/22961251/159037840-711dd3a4-bb11-4f9e-ba0c-c1fbe28f64a9.png\">\n<ul>\n<li>java.nio.channel.GatheringByteChannel</li>\n</ul>\n<img width=\"428\" alt=\"Screen Shot 2022-03-18 at 18 00 40\" src=\"https://user-images.githubusercontent.com/22961251/159037880-8ee935bd-a4d3-4256-b9db-2d956d9649a1.png\">\n<p>이는 아마 다음 포스팅에서 I/O와 NIO 차이 포스팅을 생각중인데 그 때 자세히 다룰 것 같다.</p>\n<h3 id=\"step-213-가상메모리\" style=\"position:relative;\"><a href=\"#step-213-%EA%B0%80%EC%83%81%EB%A9%94%EB%AA%A8%EB%A6%AC\" aria-label=\"step 213 가상메모리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2.1.3 가상메모리</h3>\n<p>I/O 관점에서 가상메모리<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> 를 다룰 예정이여서 가상메모리는 다른 참고자료들을 참고해보자.</p>\n<p>I/O 관점에서 가상메모리르 사용함으로 얻는 장점은 다음과 같다.</p>\n<ol>\n<li>실제 물리 메모리 크기보다 큰 가상 메모리 공간 사용 가능</li>\n<li>여러 개의 가상 주소가 하나의 물리적 메모리 주소를 참조함으로써 메모리를 효율적으로 사용 가능</li>\n</ol>\n<p>가상 메모리를 사용하면 2개의 버퍼를 사용하더라도 뒤에서 볼 <strong>메모리 맵 파일</strong>을 통해서 동일한 영역에 접근이 가능해진다. 따라서, 커널 영역 -> 유저 영역으로 데이터를 복사를 하지않아도 된다.</p>\n<ul>\n<li>커널 및 유저 영역과 매핑된 가상 메모리</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/22961251/159037912-0006eb17-c15f-44c2-bc7d-164393d33c07.png\" alt=\"C6434205-068F-4709-9EC2-ABF10C327B1A\"></p>\n<p>이런식으로 같은 영역을 사용한다고 볼 수 있다.</p>\n<h3 id=\"step-214-메모리-맵-파일-memory-mapped-io\" style=\"position:relative;\"><a href=\"#step-214-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%A7%B5-%ED%8C%8C%EC%9D%BC-memory-mapped-io\" aria-label=\"step 214 메모리 맵 파일 memory mapped io permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2.1.4 메모리 맵 파일 (Memory-mapped I/O)</h3>\n<p>위에서 가상메모리와 버퍼에 대해서 이야기를 했다. 또한, 가상메모리를 설명할 때 유저 가상 메모리와 커널 가상 메모리가 매핑되려면 메모리 맵 파일을 사용한다하였는데 이번에 이 메모리 맵 파일에 대해서 알아보고자 한다.</p>\n<p>우리가 인텔리제이를 사용한다고 가정해보자. 인텔리제이 또한 자바 기반으로 만들어져있는데 코드를 입력할 때마다 I/O 시스템 콜이 발생할 것이다. 그리고 입력된 값을 다시 버퍼에 옮기는 작업이 이뤄질 것이고, <strong>복사를 한 후에 가비지가 생기고 이를 또 가비지 컬렉터가 처리할 것</strong>이다.</p>\n<p>가비지 컬렉터가 가비지를 수거하는 것은 상당히 느린 작업이고, 많은 기업들이 GC 튜닝하는데 공을 들이는 이유일 것이다.</p>\n<p>이러한 문제점을 해결하기 위해 운영체제에서 지원하는 것이 <code class=\"language-text\">MMIO(Memory-mapped I/O)</code><sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup> 이다.</p>\n<p>위의 가상메모리 부분을 구현하는 부분이 이 부분이라고 생각해도 좋을 것 같다.\n가상메모리 설명 부분에서 말했듯이 <code class=\"language-text\">MMIO</code> 를 통하면 <code class=\"language-text\">read()</code> , <code class=\"language-text\">write()</code> 와 같은 시스템 콜을 할 필요가 없어진다고 하였다.</p>\n<p>또 다른 장점으로는 매우 큰 파일을 복사하기 위해 많은 양의 메모리를 소비하지 않아도 된다는 점이다.  이러한 이유는 내부적으로 <code class=\"language-text\">MMIO</code> 는 시스템의 페이지들을 메모리로 바라보기 때문에 필요한 부분만 메모리에 로드해서 사용하기 때문이다.</p>\n<p>자바에서는 <code class=\"language-text\">java.nio.MappedByteBuffer</code> 클래스가 <code class=\"language-text\">MMIO</code> 과 관련해서 사용되는 버퍼이다.</p>\n<ul>\n<li>java.nio.MappedByteBuffer</li>\n</ul>\n<img width=\"436\" alt=\"Screen Shot 2022-03-18 at 18 26 33\" src=\"https://user-images.githubusercontent.com/22961251/159037930-af577366-4e2e-4595-a264-7a57abf22bdc.png\">\n<h3 id=\"step-215-파일-락\" style=\"position:relative;\"><a href=\"#step-215-%ED%8C%8C%EC%9D%BC-%EB%9D%BD\" aria-label=\"step 215 파일 락 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 2.1.5 파일 락</h3>\n<p>DB를 공부하면 배타 락(X-Lock, Exclusive-Lock)과 공유 락(S-Lock, Shared-Lock)에 대해서 듣게된다. 배타 락은 주로 <strong>쓰기 작업</strong>에 사용되고 공유 락은 <strong>읽기 작업</strong>에 사용된다.</p>\n<p>사실 이 배타 락과 공유 락은 DB에만 존재하는 개념이 아니라 운영체제에서도 사용된다.\n어떠한 파일을 통해서 작업을 하고 있는데 다른 프로세스나 혹은 쓰레드가 같은 파일에 대한 작업을 못하게 막아야하기 때문에 배타 락과 공유 락이 사용된다.</p>\n<p>원래 자바 1.4 이전에는 <strong>파일 락 기능을 제공하지 않았다</strong>고 한다. 이 부분도 운영체제의 기능 중 하나였기 때문이다. 또한, 파일 락은 프로세스들의 접근 자체를 제한하거나 접근하는 방법에 제한을 줘야 했어서 JVM에서 처리가 불가능하기도 했다.</p>\n<p>NIO 패키지에서는 이러한 파일 락 기능을 제공하기 시작했다.</p>\n<ul>\n<li>java.nio.channels.FileChannel.lock()</li>\n</ul>\n<img width=\"755\" alt=\"Screen Shot 2022-03-18 at 18 33 03\" src=\"https://user-images.githubusercontent.com/22961251/159037960-b00de0a5-dd67-4879-8673-f5df4316db0c.png\">\n<h1 id=\"step-4-자바에서의-블록킹-io와-논블로킹-io-차이\" style=\"position:relative;\"><a href=\"#step-4-%EC%9E%90%EB%B0%94%EC%97%90%EC%84%9C%EC%9D%98-%EB%B8%94%EB%A1%9D%ED%82%B9-io%EC%99%80-%EB%85%BC%EB%B8%94%EB%A1%9C%ED%82%B9-io-%EC%B0%A8%EC%9D%B4\" aria-label=\"step 4 자바에서의 블록킹 io와 논블로킹 io 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 4. 자바에서의 블록킹 I/O와 논블로킹 I/O 차이</h1>\n<p>위에서 다뤘던 내용은 대부분 블록킹 I/O에 관련된 내용이었다.  이제 NIO(None-Blocking I/O)에는 블록킹 I/O와 어떤 차이가 있는지 알아보고자 한다.</p>\n<ol>\n<li>자바의 포인터 버퍼 도입</li>\n<li>네티이브 I/O 서비스르 제공해주는 채널 도입</li>\n<li>셀렉터 도입</li>\n</ol>\n<p>위의 3가지가 가장 큰 차이라고 볼 수 있다.</p>\n<h2 id=\"step-41-자바의-포인터-버퍼-도입\" style=\"position:relative;\"><a href=\"#step-41-%EC%9E%90%EB%B0%94%EC%9D%98-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EB%B2%84%ED%8D%BC-%EB%8F%84%EC%9E%85\" aria-label=\"step 41 자바의 포인터 버퍼 도입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 4.1 자바의 포인터 버퍼 도입</h2>\n<p>블록킹 I/O와  NIO의 가장 큰 차이는 <code class=\"language-text\">Buffer</code> 클래스 도입일 것이다.\n위에서 본 내용 중에서 Java는 JVM 위에서 동작하고, JVM은 하나의 프로세스이기 때문에 I/O가 비효율적이며, 블록킹되며 운영체제가 제공해주는 효율적인 기능들도 사용하지 못했다.</p>\n<p>하지만 NIO에서는 커널에 의해 관리되는 <strong>시스템 메모리를 직접 사용할 수 있는</strong><code class=\"language-text\">Buffer</code> <strong>클래스가 도입되었다.</strong> 물론 <code class=\"language-text\">DirectByteBuffer</code> 에 한정된 것이지만, 이를 통해서 기존 배열로서 처리해야 했던 많은 부분들이 좀 더 효율적이고, 편리하게 다룰 수 있도록 배려해주는 많은 메서드도 제공해주기 시작했다.</p>\n<p>결론적으로 포인터가 자바에도 생겼다고 볼 수 있는데, 이는 다음 포스팅에 NIO를 다루면서 깊게 얘기해보고자 한다.</p>\n<h2 id=\"step-42-네이티브-io-서비스를-제공-채널-도입\" style=\"position:relative;\"><a href=\"#step-42-%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-io-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EC%A0%9C%EA%B3%B5-%EC%B1%84%EB%84%90-%EB%8F%84%EC%9E%85\" aria-label=\"step 42 네이티브 io 서비스를 제공 채널 도입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 4.2 네이티브 I/O 서비스를 제공 채널 도입</h2>\n<p>기존 스트림은 단방향이었던 거에 비해서, NIO에서는 채널(Channel)을 도입함으로써 양방향 통신이 가능하게 되었다. 또한, 운영체제에서 제공해주는 네이티브 I/O 서비스들을 이용할 수 있게 되었다.</p>\n<p>채널은 버퍼 클래스와 함께 작업하도록 되어있고 이를 통해서 시스템 메모리인 버퍼에 직접적으로 데이터를 읽거나 쓸 수 있게 되었다. 또한 채널은 위에서 알아본 것처럼 Scatter, Gather를 구현해서 I/O를 보다 효율적으로 처리할 수 있게 되었다.</p>\n<p>정리하자면, 네이티브 I/O 서비스를 이용할 수 있는 채널의 도입과 이로 인해 버퍼 클래스와 함께 작업하는 양방향 통신이 가능해졌다는 것이다.</p>\n<h2 id=\"step-43-셀렉터-도입\" style=\"position:relative;\"><a href=\"#step-43-%EC%85%80%EB%A0%89%ED%84%B0-%EB%8F%84%EC%9E%85\" aria-label=\"step 43 셀렉터 도입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 4.3 셀렉터 도입</h2>\n<p>위에서 얘기한 내용처럼 버퍼, 채널과 함께 셀럭터라는 개념이 도입되었다.\n셀렉터는 네트워크의 효율을 높이기 위한 것인데 기존 자바 네트워크 프로그래밍에서는 클라이언트 하나당 스레드 하나를 생성해서 처리를 하였는데 이게 비효율적이여서 나중에는 쓰레드 풀을 도입해서 처리하기도 하였다.</p>\n<p>NIO에서는 셀렉터를 이용함으로써 단 한 개의 쓰레드로 수천에서 수 만의 동시 사용자를 처리할 수 있는 서비스를 만들 수 있게 되었다.</p>\n<p>이 또한 NIO 추가 포스팅을 통해서 알아보고자 한다.</p>\n<h1 id=\"step-5-정리\" style=\"position:relative;\"><a href=\"#step-5-%EC%A0%95%EB%A6%AC\" aria-label=\"step 5 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STEP 5. 정리</h1>\n<p>지금까지 운영체제에서 대략적인 시스템 콜과 시스템 콜이 제일 많이 발생하는 I/O 작업에 대해서 자바에서는 어떻게 처리되는지 그리고 어떻게 발전했는지 알아보았다.</p>\n<p>고전적인 Blocking I/O와 NIO의 차이도 알아보았는데 아마도 다음에는 NIO에 대해서 얘기를 하면서 깊게 들어가볼까 한다.</p>\n<p>대부분의 내용은 <a href=\"https://www.hanbit.co.kr/media/books/book_view.html?p_code=B3301693698\">자바 IO &#x26; NIO 네트워크 프로그래밍</a> 책을 참고하였다.</p>\n<p>운영체제의 내용은 <a href=\"http://www.kocw.net/home/search/kemView.do?kemId=1046323\">KOCW - 이화여대 운영체제</a> 강의 내용이 매우 좋으니 한번 쯤 보기를 권한다.</p>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REFERENCE</h1>\n<ol>\n<li><a href=\"https://pages.cs.wisc.edu/~remzi/OSFEP/intro-syscall.pdf\">intro-syscall</a></li>\n<li><a href=\"https://www.quora.com/How-does-JVM-makes-system-calls\">How does JVM makes system calls? - Quora</a></li>\n<li><a href=\"https://limdongjin.github.io/concepts/blocking-non-blocking-io.html#ibm-%E1%84%8B%E1%85%A1%E1%84%90%E1%85%B5%E1%84%8F%E1%85%B3%E1%86%AF\">blocking, non-blocking IO, 동기, 비동기 개념 정리 | limdongjin</a></li>\n</ol>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><a href=\"https://en.wikipedia.org/wiki/Direct_memory_access\">Direct memory access - Wikipedia</a><a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-2\"><a href=\"https://witscad.com/course/computer-architecture/chapter/io-communication-io-controller\">I/O Communication and I/O Controller | Computer Architecture</a><a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-3\"><a href=\"https://ko.wikipedia.org/wiki/%EA%B0%80%EC%83%81_%EB%A9%94%EB%AA%A8%EB%A6%AC\">가상 메모리 - 위키백과, 우리 모두의 백과사전</a><a href=\"#fnref-3\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-4\"><a href=\"https://en.wikipedia.org/wiki/Memory-mapped_I/O\">Memory-mapped I/O - Wikipedia</a><a href=\"#fnref-4\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","excerpt":"STEP 1.1 운영체제와 시스템 콜 STEP 2.1 I/O 향상을 위한 운영체제 수준의 기술 STEP 2.1.1 버퍼(Buffer) STEP 2.1.2 Scatter/Gather STEP 2.1.3 가상메모리 STEP 2.1.4 메모리 맵 파일 (Memory-mapped I/O) STEP 2.1.5 파일 락 STEP 4.1 자바의 포인터 버퍼 도입 STEP 4.2 네이티브 I/O 서비스를 제공 채널 도입 STEP 4.3 셀렉터 도입 시스템 콜과 자바에서의 시스템 콜 사용례 목차 개요 STEP 1. 시스템 콜이란? STEP 1.1 운영체제와 시스템 콜 STEP 2. 자바와 시스템 콜 STEP 2.1 I/O 향상을 위한 운영체제 수준의 기술 STEP 2.1.1 버퍼(Buffer) STEP 2.1.2 Scatter/Gather STEP 2.1.3 가상메모리 STEP 2.1.4 메모리 맵 파일(MMIO) STEP 2.1.5 파일 락 STEP 2.2 중간정리 STEP 4. 자바에서의 블록…","frontmatter":{"date":"March 18, 2022","title":"시스템 콜과 자바에서의 시스템 콜 사용례","categories":"개발","author":"개발한입","emoji":"💻"},"fields":{"slug":"/java-syscall-and-io/"}},"next":{"id":"6a4a185e-59a6-54d6-b8e7-2e214c10d7b4","html":"<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#gdsglobal-distribution-systems\">GDS(Global Distribution Systems)</a></p>\n</li>\n<li>\n<p><a href=\"#soap%EC%99%80-wsdl\">SOAP와 WSDL</a></p>\n<ul>\n<li><a href=\"#soapsimple-object-access-protocol%EB%9E%80\">SOAP(Simple Object Access Protocol)란?</a></li>\n<li><a href=\"#wsdlweb-services-description-language-%EB%9E%80\">WSDL(Web Services Description Language) 란?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#spring-boot-soap-%EC%98%88%EC%8B%9C\">Spring Boot SOAP 예시</a></p>\n<ul>\n<li><a href=\"#xml-%EC%8A%A4%ED%82%A4%EB%A7%88-%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1\">XML 스키마 파일 작성</a></li>\n<li><a href=\"#xml-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%9E%90%EB%B0%94-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\">XML 파일을 자바 클래스 파일로 만들기</a></li>\n<li><a href=\"#endpoint-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B0%8F-config-%ED%81%B4%EB%9E%98%EC%8A%A4\">Endpoint 클래스 및 Config 클래스</a></li>\n<li><a href=\"#%EC%8B%A4%EC%A0%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\">실제 테스트</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h1 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h1>\n<p>현재, 간단하게 여행 도메인 관련한 토이 프로젝트를 진행하고 있는 상황이다.\n먼저 항공쪽 서비스를 먼저 만들고 있었는데 궁금했던 점은 스카이 스캐너와 같은 서비스에서 어떻게 수 많은 항공사의 정보를 가져오는지 궁금했고, 이 도메인에 대해서 알게된 점과 요청, 응답 스펙에 대해서 알아보고자 한다.</p>\n<h2 id=\"gdsglobal-distribution-systems\" style=\"position:relative;\"><a href=\"#gdsglobal-distribution-systems\" aria-label=\"gdsglobal distribution systems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GDS(Global Distribution Systems)</h2>\n<p>수 많은 온라인 여행사(OTA)들이 전 세계의 항공 정보를 가져오고 있다.\n위에 개요에 말한 것 처럼 나는 이게 어떻게 가져오는 지 궁금해졌고, 리서치를 하기 시작했다.</p>\n<p>리서치를 하다보니 생소한 용어인 GDS(Global Distribution Systems)라는 를 알게되었는데 GDS는 대형항공사의 자체 예약 시스템인 CRS(Central Reservation System)이 진화한 형태로 CRS는 항공사마다 요청 스펙이 다를 수 있다보니 다중 항공사와의 시스템 호환이나 예약에는 한계가 있어서 GDS가 만들어지게 되었다고 한다.</p>\n<p>아마도, 많은 여행사들이 이 GDS를 통해서 항공 정보를 가져오는 것으로 보인다.</p>\n<p>GDS는 전세계에서 크게 3개의 기업으로 나눠지는데 다음과 같다.</p>\n<ol>\n<li><a href=\"https://developers.amadeus.com/\">토파스(아마데우스)</a></li>\n<li><a href=\"https://www.asianasabre.co.kr/\">애바카스(아시나아세이버)</a></li>\n<li><a href=\"http://galileo.co.kr/\">갈릴레오, 월드스팬(트래블포트)</a></li>\n</ol>\n<p>이중에서 토파스는 대한항공이 사용하고, 애바카스는 아시나아에서 사용한다.\n리서치를 하다보니 GDS와 항공사와 합작회사를 만들어서 사용하는게 대다수인 거 같다.</p>\n<p>아무튼 국내 항공 여행 서비스를 제공해주는 회사들을 위와 같은 솔루션을 활용한다고 생각하면 될 것 같다.</p>\n<p>당연히 GDS 마다 차이가 있고, 광고 도메인의 DSP(Demand-Side Platform) 마냥 이 GDS를 가공해서 B2C를 하는 업체에게 제공해주는 곳도 있을 것이다.</p>\n<p>찾아보니 <a href=\"https://www.bdtask.com/flight-booking-software.php\">Bdtask</a> 이런 곳이 그러한 역할을 해줄 것 같다. 아무튼 GDS마다 제공해주는 API 방식도 가지각색인데 그 중에서 <strong>SOAP(Simple Object Access Protocol)</strong> 은 공통적으로 제공한다.</p>\n<p>본 포스팅은 <strong>SOAP</strong> 로 데이터를 통신하는 예제를 다뤄보고자한다.</p>\n<p>그 전에 먼저 알아둬야할 선행 지식들이 몇가지 존재한다.</p>\n<h2 id=\"soap와-wsdl\" style=\"position:relative;\"><a href=\"#soap%EC%99%80-wsdl\" aria-label=\"soap와 wsdl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SOAP와 WSDL</h2>\n<h3 id=\"soapsimple-object-access-protocol란\" style=\"position:relative;\"><a href=\"#soapsimple-object-access-protocol%EB%9E%80\" aria-label=\"soapsimple object access protocol란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SOAP(Simple Object Access Protocol)란?</h3>\n<p>SOAP는 HTTP, HTTPS, SMTP 등을 통해서 <strong>XML 기반</strong> 의 메시지를 컴퓨터 네트워크 상에서 교환하는 프로토콜이다. 뜻과 같이 간단하게 객체로 접근가능한 프로토콜이라는 의미이다.</p>\n<p>JSON과 같이 XML도 플랫폼과 프로그래밍 언어에 종속적이지 않기 때문에 <strong>이기종간의 통신이 가능</strong>하다는 장점이 존재한다.</p>\n<p>SOAP의 메시지 형태는 다음과 같다.</p>\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/22961251/154504754-413e3c8b-f689-4d6b-a730-63b6f255655a.png\">\n</p>\n<p align=\"center\">\n    <em><a href=\"https://narup.tistory.com/80\">시간이 멈추는 장소, Simple Object Access Protocol이란?, 2020</a></em>\n</p>\n<p>그리고, SOAP는 WSDL(Web Service Description Language)를 통해서 이 서비스가 현재 어떤 내용들을 제공해주는지 알려준다.</p>\n<p>REST의 예로 들면 <code class=\"language-text\">api/v1/github/docs</code> 라는 api가 해당 api에 대한 명세에 대한 목록들을 담고 있다 가정하면, SOAP에서는 WSDL이 그러한 역할을 해준다고 볼 수 있다.</p>\n<h3 id=\"wsdlweb-services-description-language-란\" style=\"position:relative;\"><a href=\"#wsdlweb-services-description-language-%EB%9E%80\" aria-label=\"wsdlweb services description language 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WSDL(Web Services Description Language) 란?</h3>\n<p>예시로 현재 만들고 있는 토이 프로젝트에서 제공하는 WSDL을 샘플로 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>definitions</span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>wsdl</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.xmlsoap.org/wsdl/<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>sch0</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://dailyworker.github.io/tiny-travel/flight/schemas/messages<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>sch1</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://dailyworker.github.io/tiny-travel/flight/schemas/types<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>soap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.xmlsoap.org/wsdl/soap/<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://dailyworker.github.io/tiny-travel/flight/schemas/definitions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">targetNamespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://dailyworker.github.io/tiny-travel/flight/schemas/definitions<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>types</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>schema</span>\n\t\t\t<span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema<span class=\"token punctuation\">\"</span></span>\n\t\t\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://dailyworker.github.io/tiny-travel/flight/schemas/messages<span class=\"token punctuation\">\"</span></span>\n\t\t\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>types</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://dailyworker.github.io/tiny-travel/flight/schemas/types<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">attributeFormDefault</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>unqualified<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">elementFormDefault</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>qualified<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">targetNamespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://dailyworker.github.io/tiny-travel/flight/schemas/messages<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>import</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://dailyworker.github.io/tiny-travel/flight/schemas/types<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetFlightsRequest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>complexType</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>all</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>from<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>types:Airport<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>to<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>types:Airport<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>departureDate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>all</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>complexType</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>element</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetFlightsResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>complexType</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sequence</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">maxOccurs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>unbounded<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minOccurs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>flightSchedule<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>types:FlightSchedule<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sequence</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>complexType</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>element</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>schema</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>schema</span>\n\t\t\t<span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema<span class=\"token punctuation\">\"</span></span>\n\t\t\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://dailyworker.github.io/tiny-travel/flight/schemas/types<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">attributeFormDefault</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>unqualified<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">elementFormDefault</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>qualified<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">targetNamespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://dailyworker.github.io/tiny-travel/flight/schemas/types<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>complexType</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FlightSchedule<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sequence</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>AirPlane<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:Airplane<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>departDate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dateTime<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>from<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:Airport<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>arriveDate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dateTime<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>to<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:Airport<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sequence</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>complexType</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>complexType</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Airplane<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sequence</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>flightModelName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>flightNumber<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>available<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>int<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sequence</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>complexType</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>complexType</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Airport<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>all</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>airport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>all</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>complexType</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>schema</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>types</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>message</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetFlightsRequest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>part</span> <span class=\"token attr-name\">element</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sch0:GetFlightsRequest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetFlightsRequest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>part</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>message</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>message</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetFlightsResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>part</span> <span class=\"token attr-name\">element</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sch0:GetFlightsResponse<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetFlightsResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>part</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>message</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>portType</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FlightPort<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>operation</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetFlights<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>input</span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:GetFlightsRequest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetFlightsRequest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>input</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>output</span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:GetFlightsResponse<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetFlightsResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>output</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>operation</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>portType</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>binding</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FlightPortSoap11<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:FlightPort<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>binding</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>document<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">transport</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.xmlsoap.org/soap/http<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>operation</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetFlights<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>operation</span> <span class=\"token attr-name\">soapAction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetFlightsRequest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>body</span> <span class=\"token attr-name\">use</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>literal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>input</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>output</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetFlightsResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>body</span> <span class=\"token attr-name\">use</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>literal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>output</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>operation</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>binding</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>service</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FlightPortService<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>port</span> <span class=\"token attr-name\">binding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:FlightPortSoap11<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FlightPortSoap11<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>address</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://localhost:8081/flight-service<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>port</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>service</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>definitions</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>역시 <code class=\"language-text\">XML</code> 기반이다보니 복잡해보인다.\n하지만 하나씩 까보면 그렇게 어렵지(??)는 않은데 중요하게 볼 부분은 다음과 같다.</p>\n<ol>\n<li><code class=\"language-text\">&lt;wsdl:types> ... &lt;/wsdl:types></code> : <strong>교환될 메시지의 설명 및 해당 메시지에 사용될 타입을 정의</strong>한다. 여기서 타입은 스키마의 정의에 따르는데 우리는 <code class=\"language-text\">xmlns:tns=\"http://dailyworker.github.io/tiny-travel/flight/schemas/types\" </code> 여기에 명시된 타입들로 처리된다고 생각하면 된다.  실제로, <code class=\"language-text\">&lt;element name=\"from\" type=\"tns:Airport\"/></code> 와 같이 <code class=\"language-text\">tns</code> 가 붙은 것들은 해당 스키마에서 정해둔 타입을 활용한다.</li>\n<li><code class=\"language-text\">&lt;wsdl:message> ... &lt;/wsdl:message></code> : <strong>어떠한 메시지가 교환되는지에 대한 내용이 담겨져있다.</strong> <code class=\"language-text\">&lt;wsdl:message name=\"GetFlightsRequest\"></code>  이 부분을 위의 코드에서 검색해보자. 이는 DTO마냥 <code class=\"language-text\">GetFlightsRequest</code> 형식이 들어올 경우에 아래의 블록이 수행된다는 내용이다.</li>\n<li><code class=\"language-text\">&lt;wsdl:part> ... &lt;/wsdl:part></code> : 위의 내용의 아래 블록을 보면 명시된 내용인데 이는 내부에서 타입을 선언하자면 <code class=\"language-text\">XML</code> 크기가 너무 커지니 <code class=\"language-text\">GetFlightsRequest</code> 의 <strong>타입에 대한 바인딩 정보가 담겨져 있다고 생각</strong>하면된다. (원래라면 내부에 또 타입을 정의할 수도 있는데 이렇게 함으로써 XML의 중복을 제거한다고 생각하면 된다.)</li>\n<li><code class=\"language-text\">&lt;wsdl:portType> ... &lt;wsdl:portType></code> : RESTful API의 예시로 들면 <strong>어떠한 요청이 들어왔을 때, 응답이 어떠한 값으로 나오는지에 대한 정의</strong>가 명세되어있다고 생각하면 될 것 같다.</li>\n<li><code class=\"language-text\">&lt;wsdl:binding> ... &lt;wsdl:binding></code>  : 특정 <code class=\"language-text\">portType</code> 에 대한 <strong>메시지 포맷이나 프로토콜, operation 에 대한 정의</strong>부분이라고 생각하면 된다.</li>\n</ol>\n<p>대략적인 내용은 이러하다.</p>\n<p>좀 더 자세한 내용을 알고 싶다면 <a href=\"https://www.w3.org/TR/wsdl.html\">Web Service Definition Language (WSDL) 1.1</a> 이 문서를 추천한다. 상세 스펙문서이다.</p>\n<p>뭐 이 내용들은 밑에 실습을 진행하면서 다시한번 이야기해보도록 하겠다.\n자세한 이해보다는 대략적으로 아 대충 이런거구나라고 느끼는게 더 중요할 것 같다.</p>\n<p>정리하자면 SOAP는 XML 기반의 메시지 통신, 교환 프로토콜이고, 이 SOAP를 사용하기 위해서 어떤 메시지를 어떤 타입으로 주고받아야하는가에 대한 명세서가 WSDL이라고 이해하면 될 것 같다.</p>\n<p>잠깐 RESTful API와 비교를 해보자.</p>\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/22961251/154505519-9f960d12-db3b-48c7-b325-fa33b43d9d7e.jpeg\">\n</p>\n<p align=\"center\">\n    <em><a href=\"https://stackoverflow.com/a/8983122\">Nakkeeran, Simple explanation about SOAP and REST (stackoverflow)</a></em>\n</p>\n<p>이 짤방이 너무나 잘 요약해주고 있는 것 같다. SOAP는 위의 규약과 WSDL등의 규칙이 존재하기때문에 데이터 요청을 주고받을 때도 <strong>SOAP Standards</strong> 를 지켜서 보내야한다.</p>\n<p>여기서 말하는 <strong>SOAP Standard</strong> 는 <strong>SOAP Envelope, SOAP Head, SOAP Body</strong>와 같은 것들을 말한다.</p>\n<ul>\n<li>SOAP 데이터 요청 예시</li>\n</ul>\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/22961251/154505598-c71a92c2-fcce-4577-8d86-2e3713e1f5c3.png\">\n</p>\n<p>이 예시를 보면 <strong>SOAP Envelope, SOAP Head, SOAP Body</strong>가 포함되어있고, <strong>Body</strong> 내부에 실제 요청을 보낼 데이터가 담겨져있는 것을 확인 할 수 있다.</p>\n<p>SOAP 방식의 추가적인 단점은 단순 요청도 데이터 타입과 규약들이 필요하다보니 <strong>POST</strong>로 보내야한다.</p>\n<p>원래 RESTful이라면 <code class=\"language-text\">GET : api/v1/schedule/AMS-VCE-2006-01-13</code> 이런식으로도 단순화를 시킬 수 있었을 것이다.</p>\n<p>혹은 위와 같이 <code class=\"language-text\">POST</code> 요청이라면 RESTful하진 않지만 HTTP API로 가정해서 설계해본다면 아래와 같이도 가능할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">POST : api/v1/schedule \nBODY : {\n\t\"from\" : \"AMS\",\n\t\"to\"   : \"VCE\",\n\t\"departureDate\" : \"2006-01-31\"\n}</code></pre></div>\n<p>당연히 SOAP를 사용하는 것보다 편하다.</p>\n<p>하지만, 이를 사용하는 이유는 <code class=\"language-text\">RESTful API</code> 이전에 수 많은 <strong>Enterprise Service</strong>들은 SOAP 기반으로 통신을 하였고,  이 잔재가 아직 남아있는 것이라고도 볼 수 있을 것이다.</p>\n<p>그때 당시에 분명 언어나 플랫폼의 종속성 없이 XML을 정해진 규약대로 보내면 해당 요청과 응답을 받는다는 것은 각 서비스마다의 <strong>Integration</strong> 또한, 편했을 것이다라고 생각한다.</p>\n<p>RESTful과 SOAP 비교 관련해서는  <a href=\"http://web.archive.org/web/20120421084456/http://www.prescod.net/rest/rest_vs_soap_overview/\">Roots of the REST/SOAP Debate</a> 이 문서를 참고하고, 현재까지 SOAP를 쓰는 이유에 대해서는 <a href=\"https://qr.ae/pGj0ur\">Why are most of the flight booking providers still using WSDL and SOAP? Why would anyone use them? - Quora</a> 이 답변이 도움이 되보인다.</p>\n<p>결론은 아직까지도 쓰니까 우리는 쓰는 방법을 알아야한다고 요약할 수 있을 것 같다.\n다음은 스프링에서 이를 다루는 방법을 얘기해보고자 한다.</p>\n<h2 id=\"spring-boot-soap-예시\" style=\"position:relative;\"><a href=\"#spring-boot-soap-%EC%98%88%EC%8B%9C\" aria-label=\"spring boot soap 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Boot SOAP 예시</h2>\n<p>여기서는 이미 만들어진 코드를 갖고 단순하게 얘기해보고자 한다.\n해당 코드는 <a href=\"https://spring.io/guides/gs/producing-web-service/\">Producing a SOAP web Service</a>와 동일하다.\n전체 코드는 <a href=\"https://github.com/dailyworker/blog-example/tree/study/ws/spring-producing-ws-example\">spring-producing-ws-example</a> 을 참고하자.</p>\n<h3 id=\"xml-스키마-파일-작성\" style=\"position:relative;\"><a href=\"#xml-%EC%8A%A4%ED%82%A4%EB%A7%88-%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1\" aria-label=\"xml 스키마 파일 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>XML 스키마 파일 작성</h3>\n<p>예시 프로젝트에서 사용할 XML 스키마 파일은 <code class=\"language-text\">countries.xsd</code> 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>schema</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://spring.io/guides/gs-producing-web-service<span class=\"token punctuation\">\"</span></span>\n           <span class=\"token attr-name\">targetNamespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://spring.io/guides/gs-producing-web-service<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">elementFormDefault</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>qualified<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getCountryRequest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>complexType</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>sequence</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xs:string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>sequence</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>complexType</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>element</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getCountryResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>complexType</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>sequence</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>country<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:country<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>sequence</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>complexType</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>element</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>complexType</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>country<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>sequence</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xs:string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>population<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xs:int<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>capital<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xs:string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>currency<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:currency<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>sequence</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>complexType</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>simpleType</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>currency<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>restriction</span> <span class=\"token attr-name\">base</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xs:string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>enumeration</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GBP<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>enumeration</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>EUR<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>enumeration</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>PLN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>restriction</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>simpleType</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>schema</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>구조를 보면 대충 눈치를 채겠지만, <code class=\"language-text\">getCountryRequest</code> 를 받아서 <code class=\"language-text\">getContryResponse</code> 로 던져주는 SOAP WebService를 만들 것이다.</p>\n<p>예시 프로젝트에서 사용될 타입은 <code class=\"language-text\">currency</code> 와 <code class=\"language-text\">country</code> 타입이다.</p>\n<p>자 이제 이 XML 스키마 파일을 자바 클래스 파일로 역직렬화하여야 한다.</p>\n<h3 id=\"xml-파일을-자바-클래스-파일로-만들기\" style=\"position:relative;\"><a href=\"#xml-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%9E%90%EB%B0%94-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"xml 파일을 자바 클래스 파일로 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>XML 파일을 자바 클래스 파일로 만들기</h3>\n<p>이제 XML을 자바 클래스 파일로 만들어야하는데 일일히 만들어주는 것은 번거로우니 <code class=\"language-text\">JAXB</code> 를 이용하여 해당 <code class=\"language-text\">.xsd</code> 파일에 대해서 자동으로 자바 클래스 파일로 만들어줘야하는 작업이 필요하다.</p>\n<p>이를 위해서 <code class=\"language-text\">build.gradle</code> 파일에 태스크와 의존성을 추가한다.</p>\n<ul>\n<li>build.gradle</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token punctuation\">...</span>\nconfigurations <span class=\"token punctuation\">{</span>\n    jaxb\n<span class=\"token punctuation\">}</span>\n\nsourceSets <span class=\"token punctuation\">{</span>\n    main <span class=\"token punctuation\">{</span>\n        java <span class=\"token punctuation\">{</span>\n            srcDir <span class=\"token string\">'src/main/java'</span>\n            srcDir <span class=\"token string\">'build/generated-sources/jaxb'</span> <span class=\"token comment\">// xsd 파일을 통해서 역직렬화되어 생성되는 자바 클래스파일의 위치</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// xsd 파일을 토대로 자바 클래스 파일을 생성한다</span>\ntask genJaxb <span class=\"token punctuation\">{</span>\n    ext<span class=\"token punctuation\">.</span>sourcesDir <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"<span class=\"token expression\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>buildDir<span class=\"token punctuation\">}</span></span>/generated-sources/jaxb\"</span>\n    ext<span class=\"token punctuation\">.</span>schema <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"src/main/resources/countries.xsd\"</span>\n\n    outputs<span class=\"token punctuation\">.</span>dir sourcesDir\n\n    <span class=\"token function\">doLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 커스텀 Ant 태스크를 만든다.</span>\n        project<span class=\"token punctuation\">.</span>ant <span class=\"token punctuation\">{</span>\n            taskdef name<span class=\"token punctuation\">:</span> <span class=\"token string gstring\">\"xjc\"</span><span class=\"token punctuation\">,</span> classname<span class=\"token punctuation\">:</span> <span class=\"token string gstring\">\"com.sun.tools.xjc.XJCTask\"</span><span class=\"token punctuation\">,</span>\n                    classpath<span class=\"token punctuation\">:</span> configurations<span class=\"token punctuation\">.</span>jaxb<span class=\"token punctuation\">.</span>asPath\n            <span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">:</span> sourcesDir<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 위에서 입력한 스키마 폴더와 소스디렉토리에 .xsd 파일을 토대로 XML을 자바 객체로 역직렬화(Unmarshalling) 한다.</span>\n            <span class=\"token function\">xjc</span><span class=\"token punctuation\">(</span>destdir<span class=\"token punctuation\">:</span> sourcesDir<span class=\"token punctuation\">,</span> schema<span class=\"token punctuation\">:</span> schema<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">arg</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token string gstring\">\"-wsdl\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">produces</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">:</span> sourcesDir<span class=\"token punctuation\">,</span> includes<span class=\"token punctuation\">:</span> <span class=\"token string gstring\">\"**/*.java\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">...</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">...</span>\n       implementation <span class=\"token string\">'org.glassfish.jaxb:jaxb-runtime:2.3.2'</span> <span class=\"token comment\">// JDK 11 호환 문제때문에 의존성 추가</span>\n    implementation <span class=\"token string\">'wsdl4j:wsdl4j'</span>\n    <span class=\"token function\">jaxb</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"org.glassfish.jaxb:jaxb-xjc\"</span><span class=\"token punctuation\">)</span>\n\n    testImplementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이후에 <code class=\"language-text\">gradle genJaxb</code> 명령어를 수행하면 아래와 같이 클래스 파일이 만들어짐을 확인할 수 있다.</p>\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/22961251/154505901-e5fdc7dc-d1e5-421b-ae3d-d39614e34638.png\">\n</p>\n<p><code class=\"language-text\">QueryDSL</code> 의 <code class=\"language-text\">Q</code> 파일처럼 실제 사용하기 위해서는 이런 언마샬링 과정이 필요하다고 생각하면 될 것 같다.</p>\n<p>주의 할 점은 <code class=\"language-text\">QueryDSL</code> 은 도메인 파일에 <code class=\"language-text\">Q</code> 를 붙여줘서 혼동할 일이 적지만, <code class=\"language-text\">JAXB</code> 로 생성되는 스키마 객체는 도메인 클래스 파일과 이름이 동일할 수 있으므로, 헷갈릴 수가 있다.</p>\n<p>실제 프로젝트를 보면 <code class=\"language-text\">Country</code> 나 <code class=\"language-text\">Currency</code> 클래스 파일이 존재하지않는데 위에서 언마샬링해서 생성된 파일을 사용하기 때문이다.</p>\n<p>그렇다면, 실제 도메인 객체와 언마샬링 객체와 컨버팅할 수 있는 방법은 없을까?\n이는 나중에 보도록하자.</p>\n<p>대충 언마샬링까지 되는 것 같으니 이제 <code class=\"language-text\">Endpoint</code> 파일과 <code class=\"language-text\">Config</code> 파일을 만든다.</p>\n<h3 id=\"endpoint-클래스-및-config-클래스\" style=\"position:relative;\"><a href=\"#endpoint-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B0%8F-config-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"endpoint 클래스 및 config 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Endpoint 클래스 및 Config 클래스</h3>\n<p>언마샬링 객체를 initialize하는 <code class=\"language-text\">Repository</code> 클래스는 <a href=\"https://github.com/dailyworker/blog-example/blob/study/ws/spring-producing-ws-example/src/main/java/io/github/dailyworker/springproducingwsexample/CountryRepository.java\">ContryRepository</a>\n파일을 참고하자.</p>\n<ul>\n<li>WebServiceConfig</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableWs</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebServiceConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WsConfigurerAdapter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ServletRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageDispatcherServlet</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">messageDispatcherServlet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MessageDispatcherServlet</span> servlet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageDispatcherServlet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        servlet<span class=\"token punctuation\">.</span><span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        servlet<span class=\"token punctuation\">.</span><span class=\"token function\">setTransformWsdlLocations</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>servlet<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/ws/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"countries\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// http://localhost8080/ws/countries.wsdl</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWsdl11Definition</span> <span class=\"token function\">defaultWsdl11Definition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">XsdSchema</span> countriesSchema<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">DefaultWsdl11Definition</span> wsdl11Definition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWsdl11Definition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        wsdl11Definition<span class=\"token punctuation\">.</span><span class=\"token function\">setPortTypeName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CountriesPort\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        wsdl11Definition<span class=\"token punctuation\">.</span><span class=\"token function\">setLocationUri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ws\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wsdl url 설정</span>\n        wsdl11Definition<span class=\"token punctuation\">.</span><span class=\"token function\">setTargetNamespace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://spring.io/guides/gs-producing-web-service\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타겟 네임스페이스 설정</span>\n        wsdl11Definition<span class=\"token punctuation\">.</span><span class=\"token function\">setSchema</span><span class=\"token punctuation\">(</span>countriesSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 스키마 설정</span>\n        <span class=\"token keyword\">return</span> wsdl11Definition<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">XsdSchema</span> <span class=\"token function\">countriesSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleXsdSchema</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"countries.xsd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 사용할 스키마 파일 위치 등록</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 중요한 부분만 살펴보자.</p>\n<ul>\n<li><code class=\"language-text\">countriesSchema()</code></li>\n</ul>\n<p>먼저 <code class=\"language-text\">countriesSchema()</code> 는 <code class=\"language-text\">resource/countries.xsd</code> 파일을 통해서 이 파일을 스키마로 사용하겠다고 선언하는 부분이다.</p>\n<ul>\n<li><code class=\"language-text\">defaultWsdl11Definition(XsdSchema countiresSchema)</code></li>\n</ul>\n<p><code class=\"language-text\">defaultWsdl11Definition(XsdSchema countiresSchema)</code> 은 입력된 스키마를 토대로 <code class=\"language-text\">&lt;wsdl:definition> ... &lt;/wsdl:definition></code> 을 만들어주는 녀석이다.  내부 로직을 보면 알겠지만, uri나 portType등을 설정한다.</p>\n<p>참고로 <code class=\"language-text\">@Bean(name = \"countries)\"</code> 를 통해서 <code class=\"language-text\">.wsdl</code> 호출 url이 설정 가능하다. 물론 메서드명으로도 가능하다. <code class=\"language-text\">defaultWsdl11Definition()</code> 메서드를 <code class=\"language-text\">countries()</code> 로 바꾸고 위의 어노테이션을 지워도 <code class=\"language-text\">http://localhost:8080/ws/countries.wsdl</code> 로 접근하여 서비스 목록을 확인할 수 있다.</p>\n<p>다음은 SOAP의 컨트롤러의 역할을 한다고 볼 수 있는 Endpoint 이다.</p>\n<ul>\n<li>CountryEndpoint</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Endpoint</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CountryEndpoint</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> NAMESPACE_URI <span class=\"token operator\">=</span> <span class=\"token string\">\"http://spring.io/guides/gs-producing-web-service\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">CountryRepository</span> countryRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CountryEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CountryRepository</span> countryRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>countryRepository <span class=\"token operator\">=</span> countryRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PayloadRoot</span><span class=\"token punctuation\">(</span>namespace <span class=\"token operator\">=</span> NAMESPACE_URI<span class=\"token punctuation\">,</span> localPart <span class=\"token operator\">=</span> <span class=\"token string\">\"getCountryRequest\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@ResponsePayload</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GetCountryResponse</span> <span class=\"token function\">getCountry</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestPayload</span> <span class=\"token class-name\">GetCountryRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">GetCountryResponse</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetCountryResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setCountry</span><span class=\"token punctuation\">(</span>countryRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findCountry</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서는 <code class=\"language-text\">getCountry()</code> 메서드 부분만 보고자한다.</p>\n<ul>\n<li><code class=\"language-text\">@PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getCountryRequest\")</code></li>\n</ul>\n<p>먼저 <code class=\"language-text\">@PayloadRoot</code> 는 @MVC의 <code class=\"language-text\">@RequestMapping</code> 과 비슷한 역할을 한다. 다른 부분은 <code class=\"language-text\">@PayloadRoot</code> 의 <code class=\"language-text\">namespace</code> 와 <code class=\"language-text\">localPart</code> 가 일치해야 하위 메서드로 매핑되어 타진다는 것 뿐이다.</p>\n<p>각각의 파라미터들은 아래와 같은 역할을 한다.</p>\n<p>먼저 <code class=\"language-text\">namespace</code> 는 <code class=\"language-text\">countries.xsd</code> 내부에 작성된 <code class=\"language-text\">targetNamespace</code> 를 입력해준다. 이 네임스페이스를 토대로 타입이나 기타 값들을 처리하기 때문이다.</p>\n<p>확인해보면 <code class=\"language-text\"> private static final String NAMESPACE_URI = \"http://spring.io/guides/gs-producing-web-service\";</code> 이 값이 <code class=\"language-text\">countries.xsd</code> 파일의 <code class=\"language-text\">targetNamespace</code> 와 일치함을 알 수 있다.</p>\n<p>그 뒤에 <code class=\"language-text\">localPart</code> 는 요청으로 들어온 데이터 객체의 타입을 확인한다.\n여기서는 <code class=\"language-text\">getCountryRequest</code> 일 때 하위 메서드가 실행될 것이다.</p>\n<ul>\n<li><code class=\"language-text\">@ResponsePayload</code></li>\n</ul>\n<p>이 어노테이션은 @MVC의 <code class=\"language-text\">@ResponseBody</code> 와 비슷한 역할을 한다 보면된다.</p>\n<p>뭐 이 두개만 알고있다면 내부 로직은 대충 요청으로 들어온 값을 찾아서 있으면 <code class=\"language-text\">GetCountryResponse</code> 로 감싸서 던진다는 내용이라 보면 될 것이다.</p>\n<h3 id=\"실제-테스트\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"실제 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실제 테스트</h3>\n<p>E2E 테스트를 위해서 build.gradle에 다음 의존성을 추가한다.</p>\n<p><code class=\"language-text\">testImplementation 'org.springframework.ws:spring-ws-test'</code></p>\n<p>전체 코드는 <a href=\"https://github.com/dailyworker/blog-example/blob/study/ws/spring-producing-ws-example/src/test/java/io/github/dailyworker/springproducingwsexample/CountryEndpointTest.java\">CountryEndpointTest.java</a>을 참고하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getCountry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Source</span> getCountryRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;gs:getCountryRequest xmlns:gs='\"</span> <span class=\"token operator\">+</span> NAMESPACE_URI <span class=\"token operator\">+</span> <span class=\"token string\">\"'>\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;gs:name>Spain&lt;/gs:name>\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/gs:getCountryRequest>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Source</span> getCountryResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;ns2:getCountryResponse xmlns:ns2='\"</span> <span class=\"token operator\">+</span> NAMESPACE_URI <span class=\"token operator\">+</span> <span class=\"token string\">\"'>\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;ns2:country>\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;ns2:name>Spain&lt;/ns2:name>\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"&lt;ns2:population>46704314&lt;/ns2:population>\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;ns2:capital>Madrid&lt;/ns2:capital>\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;ns2:currency>EUR&lt;/ns2:currency>\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/ns2:country>\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/ns2:getCountryResponse>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mockClient\n            <span class=\"token punctuation\">.</span><span class=\"token function\">sendRequest</span><span class=\"token punctuation\">(</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>getCountryRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">noFault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">payload</span><span class=\"token punctuation\">(</span>getCountryResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">validPayload</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>해당 네임스페이스를 E2E 테스트로 목클라이언트에게 넘겨서 요청과 응답을 테스트하는 테스트이다. 테스트가 성공적으로 돌아감을 확인하였으니 이제 실제로 요청을 보내보자.</p>\n<ul>\n<li>WSDL 목록 요청 (<a href=\"http://localhost:8080/ws/countries.wsdl\">http://localhost:8080/ws/countries.wsdl</a>)</li>\n</ul>\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/22961251/154506072-3cafd507-df04-4d89-9d42-8f32c733cfd4.png\">\n</p>\n<ul>\n<li>실제 요청 테스트 및 응답 값 확인 (<a href=\"http://localhost:8080/ws\">http://localhost:8080/ws</a>)</li>\n</ul>\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/22961251/154506059-29233a65-384d-41e1-8303-858a86fdce05.png\">\n</p>\n<p>주의할 점은 <code class=\"language-text\">POST</code> 로 요청을 보내야한다는 점이다.\n이렇게 함으로써 SOAP WebService의 맛을 한번 보게되었다.</p>\n<h1 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h1>\n<p>항공 조회 토이프로젝트를 만들면서 <code class=\"language-text\">GDS</code> 라는 개념을 알게 되었고, <code class=\"language-text\">GDS</code> 가 제공해주는 <code class=\"language-text\">SOAP</code> 라는 것을 알게되서 <code class=\"language-text\">WSDL</code> 과 이걸 스프링으로 간단하게 만들어보는 예시 작업을 하였다.</p>\n<p>아까전에 잠깐 설명했지만, <code class=\"language-text\">QueryDSL</code> 과 달리 위 코드는 도메인 코드와 XSD 스키마 코드가 동일한 이름을 갖으므로 혼동될 수 있다.</p>\n<p>또한 XSD 스키마와 도메인 클래스간의 변환은 어떻게 할 것인가에 대한 문제가 존재한다.</p>\n<p>잠깐 토이 프로젝트의 샘플 코드를 보자.</p>\n<ul>\n<li>SchemaConversionUtils</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">FlightSchedule</span> <span class=\"token function\">toSchemaType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>dailyworker<span class=\"token punctuation\">.</span>flight<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span>FlightSchedule</span> domainFlightSchedule<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">DatatypeConfigurationException</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">FlightSchedule</span> schemaFlight <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlightSchedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    schemaFlight<span class=\"token punctuation\">.</span><span class=\"token function\">setAirPlane</span><span class=\"token punctuation\">(</span><span class=\"token function\">toSchemaType</span><span class=\"token punctuation\">(</span>domainFlightSchedule<span class=\"token punctuation\">.</span><span class=\"token function\">getAirplane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    schemaFlight<span class=\"token punctuation\">.</span><span class=\"token function\">setFrom</span><span class=\"token punctuation\">(</span><span class=\"token function\">toSchemaType</span><span class=\"token punctuation\">(</span>domainFlightSchedule<span class=\"token punctuation\">.</span><span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    schemaFlight<span class=\"token punctuation\">.</span><span class=\"token function\">setDepartDate</span><span class=\"token punctuation\">(</span><span class=\"token function\">toXMLGregorianCalendar</span><span class=\"token punctuation\">(</span>domainFlightSchedule<span class=\"token punctuation\">.</span><span class=\"token function\">getDepartDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    schemaFlight<span class=\"token punctuation\">.</span><span class=\"token function\">setTo</span><span class=\"token punctuation\">(</span><span class=\"token function\">toSchemaType</span><span class=\"token punctuation\">(</span>domainFlightSchedule<span class=\"token punctuation\">.</span><span class=\"token function\">getTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    schemaFlight<span class=\"token punctuation\">.</span><span class=\"token function\">setArriveDate</span><span class=\"token punctuation\">(</span><span class=\"token function\">toXMLGregorianCalendar</span><span class=\"token punctuation\">(</span>domainFlightSchedule<span class=\"token punctuation\">.</span><span class=\"token function\">getArriveDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> schemaFlight<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 인자로 도메인 클래스를 받아서 XSD 스키마 객체로 바꿔주는 작업을 한다.\n이런 식으로 구별하기 위해서 풀 패키지명을 작성하는 것도 좋아보인다.</p>\n<p>하지만, 위와 같이 작성하면 코드가 지저분해지는 단점이 있다.\n내 생각은 분명 JAXB를 제너레이트할 때 다른 클래스명으로 만드는 방법도 있을 것 같은데 아직 못찾았으니 일단 임시방편으로 활용하고 있다.</p>\n<p>더 나아가 분명 도메인, XSD 스키마 클래스간의 매핑도 일일히 위와 같이 하지 않고 오브젝트매퍼와 같은 도구가 있을 것 같은데 찾으면 공유해보도록 하겠다.</p>\n<p>참고로 웹서비스 예제는 아주 잘나와있는 예제가 있다.</p>\n<p>JPA와 활용해서 언마샬링 객체와 컨버팅 및 핸들링하는 부분의 상당한 부분을 이 프로젝트에서 아이디어를 착안하고 이를 적절하게 바꾸면서 사용하고 있는데 <a href=\"https://github.com/spring-projects/spring-ws-samples\">spring-ws-sample</a> 이 프로젝트를 추천한다.</p>\n<h1 id=\"레퍼런스\" style=\"position:relative;\"><a href=\"#%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-label=\"레퍼런스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레퍼런스</h1>\n<ol>\n<li><a href=\"http://www.gtn.co.kr/mobile/news_view.asp?news_seq=62639\">GDS 3파전 본격화…새로운 전쟁의 시작</a></li>\n<li><a href=\"https://medium.com/@stevenson14789632/gds-integration-f8717f1e3f65\">GDS Integration</a></li>\n<li><a href=\"https://narup.tistory.com/80\">SOAP Simple Object Access Protocol이란?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/209905/representational-state-transfer-rest-and-simple-object-access-protocol-soap\">Representational state transfer (REST) and Simple Object Access Protocol (SOAP)</a></li>\n<li><a href=\"http://web.archive.org/web/20120421084456/http://www.prescod.net/rest/rest_vs_soap_overview/\">Roots of the REST/SOAP Debate</a></li>\n<li><a href=\"https://qr.ae/pGj0ur\">Why are most of the flight booking providers still using WSDL and SOAP? Why would anyone use them? - Quora</a></li>\n<li><a href=\"https://www.w3.org/TR/2000/NOTE-SOAP-20000508/\">Simple Object Access Protocol (SOAP) 1.1</a></li>\n</ol>","frontmatter":{"date":"February 17, 2022","title":"Spring 공식 예제로 알아보는 SOAP와 WSDL","categories":"개발","author":"개발한입","emoji":"💻"},"fields":{"slug":"/soap-and-wsdl/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://brewagebear.github.io","comments":{"utterances":{"repo":"brewagebear/blog-comments"}}}}},"pageContext":{"slug":"/java-syscall-and-io/","nextSlug":"/soap-and-wsdl/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}